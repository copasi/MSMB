/* Generated by JTB 1.4.4 */


/**
 * JTB template file created by SF JavaCC plugin 1.5.17+ wizard for JTB 1.4.0.2+ and JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  // JTB_P = "msmb.parsers.multistateSpecies";
  STATIC = false;
  // JTB_JD = true;
  // JTB_F = true;
  // JTB_PRINTER = true;
  // JTB_W = false;
//Do not overwrite existing files}

PARSER_BEGIN(MR_MultistateSpecies_Parser)
package msmb.parsers.multistateSpecies;

import msmb.parsers.multistateSpecies.syntaxtree.*;
import msmb.parsers.multistateSpecies.visitor.*;
import java.io.*;
import msmb.parsers.mathExpression.MR_Expression_ParserConstants;
import msmb.parsers.multistateSpecies.syntaxtree.*;


public class MR_MultistateSpecies_Parser {

  public static void main(String args[]) {
    System.out.println("MR_MultistateSpecies_Parser...");
    try {
      String expression = new String("Cdh1(P{1:10})");
      InputStream is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      MR_MultistateSpecies_Parser react = new MR_MultistateSpecies_Parser(is);
      CompleteMultistateSpecies start = react.CompleteMultistateSpecies();
      DepthFirstVoidVisitor v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("c");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(p{1})");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(p{1};q{4})");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(P{1,2,ciao})");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(P{1:4,6,ciao})");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(P{1:4,6,PRED,\"pred\"})");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      System.out.println(".......OPERATORS.....................");
      //  expression = new String("Cdh1(--(p);<<(q))");
      expression = new String("Cdh1(pred(p);pred(q))");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      CompleteMultistateSpecies_Operator op = react.CompleteMultistateSpecies_Operator();
      v = new MyVisitor();
      op.accept(v);
      System.out.println("...................................");
      // expression = new String("Cdh1(++(p))");
      expression = new String("Cdh1(succ(p))");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      op = react.CompleteMultistateSpecies_Operator();
      v = new MyVisitor();
      op.accept(v);
      System.out.println("...................................");
      // expression = new String("Cdh1(>>(\"Time\");<<(q))");
      expression = new String("Cdh1(succ(\"Time\");pred(q))");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      op = react.CompleteMultistateSpecies_Operator();
      v = new MyVisitor();
      op.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(p{0:10}c)");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(p{0:10}c;q{true,false})");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("\"_Beta_-Catenin\"(cmp{\"Plasma Membrane\"})");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("\"_Beta_-Catenin\"(cmp{\"Plasma Membrane\"}).spc.c");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("NADPH(cmp{c}).spc.c");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
    }
    catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}


class MyVisitor extends DepthFirstVoidVisitor {

  public void visit(NodeToken n) {
    System.out.println("visit " + MR_MultistateSpecies_ParserConstants.tokenImage[n.kind] + "-->" + n.tokenImage);
  }

  @Override public void visit(MultistateSpecies n) {
    System.out.println("MultistateSpecies");
    super.visit(n);
  }
/*	@Override
	public void visit(MultistateSpecies_SiteSingleElement_Range n) {
	 System.out.println("RAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANGE");
	 super.visit(n); 
    
	}
*/
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token tok) {
    final NodeToken node = new NodeToken(tok.image.intern(), tok.kind, tok.beginLine, tok.beginColumn, tok.endLine, tok.endColumn);
    if (tok.specialToken == null)
      return node;
    final java.util.ArrayList<NodeToken> temp = new java.util.ArrayList<NodeToken>();
    Token t = tok;
    while (t.specialToken != null) {
      t = t.specialToken;
      temp.add(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
    }
    for (int i = temp.size() - 1; i >= 0; --i)
      node.addSpecial(temp.get(i));
    node.trimSpecials();
    return node;
  }
}

PARSER_END(MR_MultistateSpecies_Parser)

SKIP :
{
  "\t"
| "\n"
| "\r"
| < "//" ( ~["\n", "\r"] )* ( "\n"| "\r"| "\r\n" ) >
| < "/*" ( ~["*"] )* "*" ( ~["/"] ( ~["*"] )* "*" )* "/" >
}

TOKEN :
/* KEYWORDS */
{
  < TIME : "Time" >
| < SUM : "SUM" >
| < FLOOR : "floor" >
| < SQRT : "sqrt" >
| < LOG : "log" >
| < SUCC : "succ" >
| < PREC : "pred" >
| < CIRCULAR_FLAG : "c" >
//| < CIRC_L_SHIFT: "<<">
//| < CIRC_R_SHIFT: ">>">
}

TOKEN :
{
  < BLANK : " " >
| < OPEN_R : "(" >
| < CLOSED_R : ")" >
| < OPEN_C : "{" >
| < CLOSED_C : "}" >
| < RANGE_SEPARATOR : ":" >
| < SITE_NAMES_SEPARATOR : ";" >
| < SITE_STATES_SEPARATOR : "," >
| < STRING_LITERAL : "\"" ( ( ~["\"", "\\", "\n", "\r"] )| ["\u0370"-"\u03ff"]| ( "\\" ( ["n", "t", "b", "r", "f", "\\", "'", "\""]| ["0"-"7"] ( ["0"-"7"] )?| ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) )* "\"" >
| < NUMBER : ( ["0"-"9"] )+ >
| < MULTI_IDENTIFIER : ( ["A"-"Z", "_", "a"-"z", "'", "<", ">", "|", "&", "!", "@", "#", "$", "%", "^", "+", "*", "-", "/", "~", "`", "[", "]", "\u0370"-"\u03ff"]| <NUMBER>| <UNDEFINED_SITE_SYMBOL> )+ >
| < UNDEFINED_SITE_SYMBOL : "?" >
| < EXTENSION_CONC : ".c" >
| < EXTENSION_PARTICLE : ".p" >
| < EXTENSION_TRANS : ".t" >
| < EXTENSION_INIT : ".i" >
| < EXTENSION_RATE : ".r" >
| < EXTENSION_SPECIES : ".spc" >
| < EXTENSION_GLOBALQ : ".glq" >
| < EXTENSION_COMPARTMENT : ".cmp" >
| < EXTENSION_REACTION : ".rct" >
| < EXTENSION_FUNCTION : ".fnc" >
| < EXTENSION_FLUX : ".f" >
}

CompleteMultistateSpecies CompleteMultistateSpecies() :
{
  // --- JTB generated node declarations ---
  MultistateSpecies n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  PossibleExtensions n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n0 = MultistateSpecies()
  (
    n2 = PossibleExtensions()
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  n4 = < EOF > {
    n4.beginColumn++;
    n4.endColumn++;
    { n3 = JTBToolkit.makeNodeToken(n4); }
  }
  { return new CompleteMultistateSpecies(n0, n1, n3); }
}

CompleteMultistateSpecies_Operator CompleteMultistateSpecies_Operator() throws ParseException :
{
  // --- JTB generated node declarations ---
  MultistateSpecies_Operator n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  PossibleExtensions n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n0 = MultistateSpecies_Operator()
  (
    n2 = PossibleExtensions()
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  n4 = < EOF > {
    n4.beginColumn++;
    n4.endColumn++;
    { n3 = JTBToolkit.makeNodeToken(n4); }
  }
  { return new CompleteMultistateSpecies_Operator(n0, n1, n3); }
}

CompleteMultistateSpecies_Range CompleteMultistateSpecies_Range() throws ParseException :
{
  // --- JTB generated node declarations ---
  MultistateSpecies_SiteSingleElement_Range n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
}
{
  n0 = MultistateSpecies_SiteSingleElement_Range()
  n2 = < EOF > {
    n2.beginColumn++;
    n2.endColumn++;
    { n1 = JTBToolkit.makeNodeToken(n2); }
  }
  { return new CompleteMultistateSpecies_Range(n0, n1); }
}

CompleteMultistateSpecies_RangeString CompleteMultistateSpecies_RangeString() throws ParseException :
{
  // --- JTB generated node declarations ---
  MultistateSpecies_SiteSingleElement n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
}
{
  n0 = MultistateSpecies_SiteSingleElement()
  n2 = < EOF > {
    n2.beginColumn++;
    n2.endColumn++;
    { n1 = JTBToolkit.makeNodeToken(n2); }
  }
  { return new CompleteMultistateSpecies_RangeString(n0, n1); }
}

PossibleExtensions PossibleExtensions() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
}
{
  (
    n2 = < EXTENSION_CONC >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 11); }
  |
    n4 = < EXTENSION_COMPARTMENT >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 11); }
  |
    n6 = < EXTENSION_PARTICLE >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 11); }
  |
    n8 = < EXTENSION_TRANS >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n0 = new NodeChoice(n7, 3, 11); }
  |
    n10 = < EXTENSION_INIT >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n0 = new NodeChoice(n9, 4, 11); }
  |
    n12 = < EXTENSION_RATE >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n0 = new NodeChoice(n11, 5, 11); }
  |
    n14 = < EXTENSION_SPECIES >
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n0 = new NodeChoice(n13, 6, 11); }
  |
    n16 = < EXTENSION_GLOBALQ >
    { n15 = JTBToolkit.makeNodeToken(n16); }
    { n0 = new NodeChoice(n15, 7, 11); }
  |
    n18 = < EXTENSION_FUNCTION >
    { n17 = JTBToolkit.makeNodeToken(n18); }
    { n0 = new NodeChoice(n17, 8, 11); }
  |
    n20 = < EXTENSION_REACTION >
    { n19 = JTBToolkit.makeNodeToken(n20); }
    { n0 = new NodeChoice(n19, 9, 11); }
  |
    n22 = < EXTENSION_FLUX >
    { n21 = JTBToolkit.makeNodeToken(n22); }
    { n0 = new NodeChoice(n21, 10, 11); }
  )
  { return new PossibleExtensions(n0); }
}

MultistateSpecies MultistateSpecies() throws ParseException :
{
  // --- JTB generated node declarations ---
  MultistateSpecies_Name n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  MultistateSpecies_SingleStateDefinition n5 = null;
  NodeListOptional n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  MultistateSpecies_SingleStateDefinition n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
}
{
  n0 = MultistateSpecies_Name()
  (
    { n6 = new NodeListOptional(); }
    { n2 = new NodeSequence(4); }
    n4 = < OPEN_R >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = MultistateSpecies_SingleStateDefinition()
    { n2.addNode(n5); }
    (
      { n7 = new NodeSequence(2); }
      n9 = < SITE_NAMES_SEPARATOR >
      { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10 = MultistateSpecies_SingleStateDefinition()
      { n7.addNode(n10); }
      { n6.addNode(n7); }
    )*
    { n6.nodes.trimToSize(); }
    { n2.addNode(n6); }
    n12 = < CLOSED_R >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n2.addNode(n11); }
    { n1.addNode(n2); }
  )?
  { return new MultistateSpecies(n0, n1); }
}

MultistateSpecies_SingleStateDefinition MultistateSpecies_SingleStateDefinition() throws ParseException :
{
  // --- JTB generated node declarations ---
  MultistateSpecies_SiteName n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  MultistateSpecies_SiteSingleElement n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  MultistateSpecies_SiteSingleElement n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeOptional n11 = new NodeOptional();
  NodeToken n12 = null;
  Token n13 = null;
}
{
  n0 = MultistateSpecies_SiteName()
  n2 = < OPEN_C >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = MultistateSpecies_SiteSingleElement()
  (
    { n5 = new NodeSequence(2); }
    n7 = < SITE_STATES_SEPARATOR >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n5.addNode(n6); }
    n8 = MultistateSpecies_SiteSingleElement()
    { n5.addNode(n8); }
    { n4.addNode(n5); }
  )*
  { n4.nodes.trimToSize(); }
  n10 = < CLOSED_C >
  { n9 = JTBToolkit.makeNodeToken(n10); }
  (
    n13 = < CIRCULAR_FLAG >
    { n12 = JTBToolkit.makeNodeToken(n13); }
    { n11.addNode(n12); }
  )?
  { return new MultistateSpecies_SingleStateDefinition(n0, n1, n3, n4, n9, n11); }
}

MultistateSpecies_Name MultistateSpecies_Name() throws ParseException :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeList n3 = new NodeList();
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
}
{
  (
    n2 = < STRING_LITERAL >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    (
      (
        n6 = < MULTI_IDENTIFIER >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n4 = new NodeChoice(n5, 0, 7); }
      |
        n8 = < CIRCULAR_FLAG >
        { n7 = JTBToolkit.makeNodeToken(n8); }
        { n4 = new NodeChoice(n7, 1, 7); }
      |
        n10 = < CLOSED_R >
        { n9 = JTBToolkit.makeNodeToken(n10); }
        { n4 = new NodeChoice(n9, 2, 7); }
      |
        n12 = < SITE_NAMES_SEPARATOR >
        { n11 = JTBToolkit.makeNodeToken(n12); }
        { n4 = new NodeChoice(n11, 3, 7); }
      |
        n14 = < RANGE_SEPARATOR >
        { n13 = JTBToolkit.makeNodeToken(n14); }
        { n4 = new NodeChoice(n13, 4, 7); }
      |
        n16 = < SITE_STATES_SEPARATOR >
        { n15 = JTBToolkit.makeNodeToken(n16); }
        { n4 = new NodeChoice(n15, 5, 7); }
      |
        n18 = < CLOSED_C >
        { n17 = JTBToolkit.makeNodeToken(n18); }
        { n4 = new NodeChoice(n17, 6, 7); }
      )
      { n3.addNode(n4); }
    )+
    { n3.nodes.trimToSize(); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new MultistateSpecies_Name(n0); }
}

MultistateSpecies_SiteSingleElement MultistateSpecies_SiteSingleElement() throws ParseException :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeList n3 = new NodeList();
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeOptional n13 = new NodeOptional();
  NodeSequence n14 = null;
  NodeListOptional n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeListOptional n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeChoice n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeList n26 = null;
  NodeChoice n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
}
{
  (
    (
      n2 = < STRING_LITERAL >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      (
        (
          n6 = < CIRCULAR_FLAG >
          { n5 = JTBToolkit.makeNodeToken(n6); }
          { n4 = new NodeChoice(n5, 0, 4); }
        |
          n8 = < MULTI_IDENTIFIER >
          { n7 = JTBToolkit.makeNodeToken(n8); }
          { n4 = new NodeChoice(n7, 1, 4); }
        |
          n10 = < NUMBER >
          { n9 = JTBToolkit.makeNodeToken(n10); }
          { n4 = new NodeChoice(n9, 2, 4); }
        |
          n12 = < OPEN_R >
          { n11 = JTBToolkit.makeNodeToken(n12); }
          { n4 = new NodeChoice(n11, 3, 4); }
        )
        { n3.addNode(n4); }
      )+
      { n3.nodes.trimToSize(); }
      { n0 = new NodeChoice(n3, 1, 2); }
    )
    
  )
  (
    { n15 = new NodeListOptional(); }
    { n20 = new NodeListOptional(); }
    { n26 = new NodeList(); }
    { n14 = new NodeSequence(4); }
    (
      n17 = " "
      { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
    )*
    { n15.nodes.trimToSize(); }
    { n14.addNode(n15); }
    n19 = < RANGE_SEPARATOR >
    { n18 = JTBToolkit.makeNodeToken(n19); }
    { n14.addNode(n18); }
    (
      n22 = " "
      { n21 = JTBToolkit.makeNodeToken(n22); }
      { n20.addNode(n21); }
    )*
    { n20.nodes.trimToSize(); }
    { n14.addNode(n20); }
    (
      (
        n25 = < STRING_LITERAL >
        { n24 = JTBToolkit.makeNodeToken(n25); }
        { n23 = new NodeChoice(n24, 0, 2); }
      |
        (
          (
            n29 = < MULTI_IDENTIFIER >
            { n28 = JTBToolkit.makeNodeToken(n29); }
            { n27 = new NodeChoice(n28, 0, 3); }
          |
            n31 = < NUMBER >
            { n30 = JTBToolkit.makeNodeToken(n31); }
            { n27 = new NodeChoice(n30, 1, 3); }
          |
            n33 = < OPEN_R >
            { n32 = JTBToolkit.makeNodeToken(n33); }
            { n27 = new NodeChoice(n32, 2, 3); }
          )
          { n26.addNode(n27); }
        )+
        { n26.nodes.trimToSize(); }
        { n23 = new NodeChoice(n26, 1, 2); }
      )
      
    )
    { n14.addNode(n23); }
    { n13.addNode(n14); }
  )?
  { return new MultistateSpecies_SiteSingleElement(n0, n13); }
}

MultistateSpecies_SiteSingleElement_Range MultistateSpecies_SiteSingleElement_Range() throws ParseException :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeListOptional n7 = new NodeListOptional();
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
}
{
  n1 = < NUMBER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    n4 = " "
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  n6 = < RANGE_SEPARATOR >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  (
    n9 = " "
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n7.addNode(n8); }
  )*
  { n7.nodes.trimToSize(); }
  n11 = < NUMBER >
  { n10 = JTBToolkit.makeNodeToken(n11); }
  { return new MultistateSpecies_SiteSingleElement_Range(n0, n2, n5, n7, n10); }
}

MultistateSpecies_SiteName MultistateSpecies_SiteName() throws ParseException :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeList n3 = new NodeList();
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
}
{
  (
    n2 = < STRING_LITERAL >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    (
      (
        n6 = < MULTI_IDENTIFIER >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n4 = new NodeChoice(n5, 0, 5); }
      |
        n8 = < CLOSED_C >
        { n7 = JTBToolkit.makeNodeToken(n8); }
        { n4 = new NodeChoice(n7, 1, 5); }
      |
        n10 = < OPEN_R >
        { n9 = JTBToolkit.makeNodeToken(n10); }
        { n4 = new NodeChoice(n9, 2, 5); }
      |
        n12 = < CLOSED_R >
        { n11 = JTBToolkit.makeNodeToken(n12); }
        { n4 = new NodeChoice(n11, 3, 5); }
      |
        n14 = < SITE_STATES_SEPARATOR >
        { n13 = JTBToolkit.makeNodeToken(n14); }
        { n4 = new NodeChoice(n13, 4, 5); }
      )
      { n3.addNode(n4); }
    )+
    { n3.nodes.trimToSize(); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new MultistateSpecies_SiteName(n0); }
}

MultistateSpecies_Operator MultistateSpecies_Operator() throws ParseException :
{
  // --- JTB generated node declarations ---
  MultistateSpecies_Name n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  MultistateSpecies_Operator_SingleSite n5 = null;
  NodeListOptional n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  MultistateSpecies_Operator_SingleSite n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
}
{
  n0 = MultistateSpecies_Name()
  (
    { n6 = new NodeListOptional(); }
    { n2 = new NodeSequence(4); }
    n4 = < OPEN_R >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = MultistateSpecies_Operator_SingleSite()
    { n2.addNode(n5); }
    (
      { n7 = new NodeSequence(2); }
      n9 = < SITE_NAMES_SEPARATOR >
      { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10 = MultistateSpecies_Operator_SingleSite()
      { n7.addNode(n10); }
      { n6.addNode(n7); }
    )*
    { n6.nodes.trimToSize(); }
    { n2.addNode(n6); }
    n12 = < CLOSED_R >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n2.addNode(n11); }
    { n1.addNode(n2); }
  )?
  { return new MultistateSpecies_Operator(n0, n1); }
}

MultistateSpecies_Operator_SingleSite MultistateSpecies_Operator_SingleSite() throws ParseException :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  MultistateSpecies_Operator_SiteName n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeSequence n12 = null;
  MultistateSpecies_Operator_SiteName n13 = null;
  NodeOptional n14 = new NodeOptional();
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  MultistateSpecies_Operator_SiteSingleState n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
}
{
  (
    { n1 = new NodeSequence(4); }
    (
      (
        n4 = < SUCC >
        { n3 = JTBToolkit.makeNodeToken(n4); }
        { n2 = new NodeChoice(n3, 0, 2); }
      |
        n6 = < PREC >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n2 = new NodeChoice(n5, 1, 2); }
      )
      
    )
    { n1.addNode(n2); }
    n8 = //| < CIRC_L_SHIFT > | <  CIRC_R_SHIFT >)
    < OPEN_R >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n1.addNode(n7); }
    n9 = MultistateSpecies_Operator_SiteName()
    { n1.addNode(n9); }
    n11 = < CLOSED_R >
    { n10 = JTBToolkit.makeNodeToken(n11); }
    { n1.addNode(n10); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n12 = new NodeSequence(2); }
    n13 = MultistateSpecies_Operator_SiteName()
    { n12.addNode(n13); }
    (
      { n15 = new NodeSequence(3); }
      n17 = < OPEN_C >
      { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
      n18 = MultistateSpecies_Operator_SiteSingleState()
      { n15.addNode(n18); }
      n20 = < CLOSED_C >
      { n19 = JTBToolkit.makeNodeToken(n20); }
      { n15.addNode(n19); }
      { n14.addNode(n15); }
    )?
    { n12.addNode(n14); }
    { n0 = new NodeChoice(n12, 1, 2); }
  )
  { return new MultistateSpecies_Operator_SingleSite(n0); }
}

MultistateSpecies_Operator_SiteName MultistateSpecies_Operator_SiteName() throws ParseException :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeList n3 = new NodeList();
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  (
    n2 = < STRING_LITERAL >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    (
      (
        n6 = < MULTI_IDENTIFIER >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n4 = new NodeChoice(n5, 0, 2); }
      |
        n8 = < NUMBER >
        { n7 = JTBToolkit.makeNodeToken(n8); }
        { n4 = new NodeChoice(n7, 1, 2); }
      )
      { n3.addNode(n4); }
    )+
    { n3.nodes.trimToSize(); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new MultistateSpecies_Operator_SiteName(n0); }
//| < OPEN_R >|  < RANGE_SEPARATOR > )+
}

MultistateSpecies_Operator_SiteSingleState MultistateSpecies_Operator_SiteSingleState() throws ParseException :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeList n3 = new NodeList();
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  (
    n2 = < STRING_LITERAL >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    (
      (
        n6 = < MULTI_IDENTIFIER >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n4 = new NodeChoice(n5, 0, 2); }
      |
        n8 = < NUMBER >
        { n7 = JTBToolkit.makeNodeToken(n8); }
        { n4 = new NodeChoice(n7, 1, 2); }
      )
      { n3.addNode(n4); }
    )+
    { n3.nodes.trimToSize(); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new MultistateSpecies_Operator_SiteSingleState(n0); }
//| < OPEN_R >|  < RANGE_SEPARATOR > )+
}
