/* Generated by JTB 1.4.4 */
package msmb.parsers.mathExpression.syntaxtree;

import msmb.parsers.mathExpression.visitor.*;

/**
 * JTB node class for the production IfExpression:<br>
 * Corresponding grammar :<br>
 * nodeToken -> < IF ><br>
 * nodeToken1 -> < LPAREN ><br>
 * expression -> Expression()<br>
 * nodeToken2 -> < COMMA ><br>
 * expression1 -> Expression()<br>
 * nodeOptional -> ( #0 < COMMA > #1 Expression() )?<br>
 * nodeToken3 -> < RPAREN ><br>
 */
public class IfExpression implements INode {

  /** A child node */
  public NodeToken nodeToken;

  /** A child node */
  public NodeToken nodeToken1;

  /** A child node */
  public Expression expression;

  /** A child node */
  public NodeToken nodeToken2;

  /** A child node */
  public Expression expression1;

  /** A child node */
  public NodeOptional nodeOptional;

  /** A child node */
  public NodeToken nodeToken3;

  /** The serial version uid */
  private static final long serialVersionUID = 144L;

  /**
   * Constructs the node with all its children nodes.
   *
   * @param n0 first child node
   * @param n1 next child node
   * @param n2 next child node
   * @param n3 next child node
   * @param n4 next child node
   * @param n5 next child node
   * @param n6 next child node
   */
  public IfExpression(final NodeToken n0, final NodeToken n1, final Expression n2, final NodeToken n3, final Expression n4, final NodeOptional n5, final NodeToken n6) {
    nodeToken = n0;
    nodeToken1 = n1;
    expression = n2;
    nodeToken2 = n3;
    expression1 = n4;
    nodeOptional = n5;
    nodeToken3 = n6;
  }

  /**
   * Constructs the node with only its non NodeToken child node(s).
   *
   * @param n0 first child node
   * @param n1 next child node
   * @param n2 next child node
   */
  public IfExpression(final Expression n0, final Expression n1, final NodeOptional n2) {
    nodeToken = new NodeToken("if");
    nodeToken1 = new NodeToken("(");
    expression = n0;
    nodeToken2 = new NodeToken(",");
    expression1 = n1;
    nodeOptional = n2;
    nodeToken3 = new NodeToken(")");
  }

  /**
   * Accepts the IRetArguVisitor visitor.
   *
   * @param <R> the user return type
   * @param <A> the user argument type
   * @param vis the visitor
   * @param argu a user chosen argument
   * @return a user chosen return information
   */
  public <R, A> R accept(final IRetArguVisitor<R, A> vis, final A argu) {
    return vis.visit(this, argu);
  }

  /**
   * Accepts the IRetVisitor visitor.
   *
   * @param <R> the user return type
   * @param vis the visitor
   * @return a user chosen return information
   */
  public <R> R accept(final IRetVisitor<R> vis) {
    return vis.visit(this);
  }

  /**
   * Accepts the IVoidArguVisitor visitor.
   *
   * @param <A> the user argument type
   * @param vis the visitor
   * @param argu a user chosen argument
   */
  public <A> void accept(final IVoidArguVisitor<A> vis, final A argu) {
    vis.visit(this, argu);
  }

  /**
   * Accepts the IVoidVisitor visitor.
   *
   * @param vis the visitor
   */
  public void accept(final IVoidVisitor vis) {
    vis.visit(this);
  }

}
