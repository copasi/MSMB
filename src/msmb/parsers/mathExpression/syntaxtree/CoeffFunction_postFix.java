/* Generated by JTB 1.4.4 */
package msmb.parsers.mathExpression.syntaxtree;

import msmb.parsers.mathExpression.visitor.*;

/**
 * JTB node class for the production CoeffFunction_postFix:<br>
 * Corresponding grammar :<br>
 * nodeToken -> < LPAREN ><br>
 * nodeOptional -> [ ArgumentList() ]<br>
 * nodeToken1 -> < RPAREN ><br>
 */
public class CoeffFunction_postFix implements INode {

  /** A child node */
  public NodeToken nodeToken;

  /** A child node */
  public NodeOptional nodeOptional;

  /** A child node */
  public NodeToken nodeToken1;

  /** The serial version uid */
  private static final long serialVersionUID = 144L;

  /**
   * Constructs the node with all its children nodes.
   *
   * @param n0 first child node
   * @param n1 next child node
   * @param n2 next child node
   */
  public CoeffFunction_postFix(final NodeToken n0, final NodeOptional n1, final NodeToken n2) {
    nodeToken = n0;
    nodeOptional = n1;
    nodeToken1 = n2;
  }

  /**
   * Constructs the node with only its non NodeToken child node(s).
   *
   * @param n0 first child node
   */
  public CoeffFunction_postFix(final NodeOptional n0) {
    nodeToken = new NodeToken("(");
    nodeOptional = n0;
    nodeToken1 = new NodeToken(")");
  }

  /**
   * Accepts the IRetArguVisitor visitor.
   *
   * @param <R> the user return type
   * @param <A> the user argument type
   * @param vis the visitor
   * @param argu a user chosen argument
   * @return a user chosen return information
   */
  public <R, A> R accept(final IRetArguVisitor<R, A> vis, final A argu) {
    return vis.visit(this, argu);
  }

  /**
   * Accepts the IRetVisitor visitor.
   *
   * @param <R> the user return type
   * @param vis the visitor
   * @return a user chosen return information
   */
  public <R> R accept(final IRetVisitor<R> vis) {
    return vis.visit(this);
  }

  /**
   * Accepts the IVoidArguVisitor visitor.
   *
   * @param <A> the user argument type
   * @param vis the visitor
   * @param argu a user chosen argument
   */
  public <A> void accept(final IVoidArguVisitor<A> vis, final A argu) {
    vis.visit(this, argu);
  }

  /**
   * Accepts the IVoidVisitor visitor.
   *
   * @param vis the visitor
   */
  public void accept(final IVoidVisitor vis) {
    vis.visit(this);
  }

}
