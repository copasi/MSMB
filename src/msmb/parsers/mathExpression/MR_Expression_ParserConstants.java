/* Generated By:JavaCC: Do not edit this line. MR_Expression_ParserConstants.java */
package msmb.parsers.mathExpression;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MR_Expression_ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IF = 7;
  /** RegularExpression Id. */
  int THEN = 8;
  /** RegularExpression Id. */
  int ELSE = 9;
  /** RegularExpression Id. */
  int FALSE = 10;
  /** RegularExpression Id. */
  int TRUE = 11;
  /** RegularExpression Id. */
  int TRUE_1 = 12;
  /** RegularExpression Id. */
  int TRUE_2 = 13;
  /** RegularExpression Id. */
  int TRUE_3 = 14;
  /** RegularExpression Id. */
  int FALSE_1 = 15;
  /** RegularExpression Id. */
  int FALSE_2 = 16;
  /** RegularExpression Id. */
  int FALSE_3 = 17;
  /** RegularExpression Id. */
  int TIME = 18;
  /** RegularExpression Id. */
  int TYPE_PAR = 19;
  /** RegularExpression Id. */
  int TYPE_VAR = 20;
  /** RegularExpression Id. */
  int TYPE_SUB = 21;
  /** RegularExpression Id. */
  int TYPE_PROD = 22;
  /** RegularExpression Id. */
  int TYPE_MOD = 23;
  /** RegularExpression Id. */
  int TYPE_SITE = 24;
  /** RegularExpression Id. */
  int TYPE_VOL = 25;
  /** RegularExpression Id. */
  int TYPE_TIME = 26;
  /** RegularExpression Id. */
  int EXTENSION_CONC = 27;
  /** RegularExpression Id. */
  int EXTENSION_PARTICLE = 28;
  /** RegularExpression Id. */
  int EXTENSION_TRANS = 29;
  /** RegularExpression Id. */
  int EXTENSION_INIT = 30;
  /** RegularExpression Id. */
  int EXTENSION_RATE = 31;
  /** RegularExpression Id. */
  int EXTENSION_SPECIES = 32;
  /** RegularExpression Id. */
  int EXTENSION_GLOBALQ = 33;
  /** RegularExpression Id. */
  int EXTENSION_COMPARTMENT = 34;
  /** RegularExpression Id. */
  int EXTENSION_REACTION = 35;
  /** RegularExpression Id. */
  int EXTENSION_FUNCTION = 36;
  /** RegularExpression Id. */
  int EXTENSION_FLUX = 37;
  /** RegularExpression Id. */
  int MY_SPECIAL_EXTENSION = 38;
  /** RegularExpression Id. */
  int SUM = 39;
  /** RegularExpression Id. */
  int DELAY = 40;
  /** RegularExpression Id. */
  int FLOOR = 41;
  /** RegularExpression Id. */
  int CEIL = 42;
  /** RegularExpression Id. */
  int COS = 43;
  /** RegularExpression Id. */
  int SIN = 44;
  /** RegularExpression Id. */
  int TAN = 45;
  /** RegularExpression Id. */
  int ACOS = 46;
  /** RegularExpression Id. */
  int ASIN = 47;
  /** RegularExpression Id. */
  int ATAN = 48;
  /** RegularExpression Id. */
  int TANH = 49;
  /** RegularExpression Id. */
  int COSH = 50;
  /** RegularExpression Id. */
  int SEC = 51;
  /** RegularExpression Id. */
  int CSC = 52;
  /** RegularExpression Id. */
  int COT = 53;
  /** RegularExpression Id. */
  int SINH = 54;
  /** RegularExpression Id. */
  int ARCSEC = 55;
  /** RegularExpression Id. */
  int ARCCSC = 56;
  /** RegularExpression Id. */
  int ARCCOT = 57;
  /** RegularExpression Id. */
  int ARCSINH = 58;
  /** RegularExpression Id. */
  int ARCCOSH = 59;
  /** RegularExpression Id. */
  int ARCTANH = 60;
  /** RegularExpression Id. */
  int ARCSECH = 61;
  /** RegularExpression Id. */
  int ARCCSCH = 62;
  /** RegularExpression Id. */
  int ARCCOTH = 63;
  /** RegularExpression Id. */
  int SQRT = 64;
  /** RegularExpression Id. */
  int FACTORIAL = 65;
  /** RegularExpression Id. */
  int EXP = 66;
  /** RegularExpression Id. */
  int LOG = 67;
  /** RegularExpression Id. */
  int LOG10 = 68;
  /** RegularExpression Id. */
  int ABS = 69;
  /** RegularExpression Id. */
  int MIN = 70;
  /** RegularExpression Id. */
  int MAX = 71;
  /** RegularExpression Id. */
  int PI = 72;
  /** RegularExpression Id. */
  int EXPONENTIALE = 73;
  /** RegularExpression Id. */
  int NAN1 = 74;
  /** RegularExpression Id. */
  int NAN2 = 75;
  /** RegularExpression Id. */
  int CONST_AVOGADRO = 76;
  /** RegularExpression Id. */
  int CONST_QUANTITY_CONV_FACTOR = 77;
  /** RegularExpression Id. */
  int CONST_MODEL_TIME = 78;
  /** RegularExpression Id. */
  int CONST_MODEL_TIME_INITIAL = 79;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 80;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 81;
  /** RegularExpression Id. */
  int EXPONENT = 82;
  /** RegularExpression Id. */
  int LPAREN = 83;
  /** RegularExpression Id. */
  int RPAREN = 84;
  /** RegularExpression Id. */
  int LBRACE = 85;
  /** RegularExpression Id. */
  int RBRACE = 86;
  /** RegularExpression Id. */
  int LBRACKET = 87;
  /** RegularExpression Id. */
  int RBRACKET = 88;
  /** RegularExpression Id. */
  int SEMICOLON = 89;
  /** RegularExpression Id. */
  int COMMA = 90;
  /** RegularExpression Id. */
  int COLON = 91;
  /** RegularExpression Id. */
  int DOT = 92;
  /** RegularExpression Id. */
  int PLUS = 93;
  /** RegularExpression Id. */
  int MINUS = 94;
  /** RegularExpression Id. */
  int TIMES = 95;
  /** RegularExpression Id. */
  int DIV = 96;
  /** RegularExpression Id. */
  int ASSIGN = 97;
  /** RegularExpression Id. */
  int GT = 98;
  /** RegularExpression Id. */
  int LT = 99;
  /** RegularExpression Id. */
  int BANG = 100;
  /** RegularExpression Id. */
  int CARET = 101;
  /** RegularExpression Id. */
  int PERC = 102;
  /** RegularExpression Id. */
  int EQ = 103;
  /** RegularExpression Id. */
  int LEQ = 104;
  /** RegularExpression Id. */
  int GEQ = 105;
  /** RegularExpression Id. */
  int NE = 106;
  /** RegularExpression Id. */
  int OR = 107;
  /** RegularExpression Id. */
  int XOR = 108;
  /** RegularExpression Id. */
  int AND = 109;
  /** RegularExpression Id. */
  int IDENTIFIER = 110;
  /** RegularExpression Id. */
  int LETTER = 111;
  /** RegularExpression Id. */
  int DIGIT = 112;
  /** RegularExpression Id. */
  int STRING_LITERAL = 113;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "<FALSE>",
    "<TRUE>",
    "\"true\"",
    "\"True\"",
    "\"TRUE\"",
    "\"false\"",
    "\"False\"",
    "\"FALSE\"",
    "\"Time\"",
    "\"GLQ\"",
    "\"VAR\"",
    "\"SUB\"",
    "\"PROD\"",
    "\"MOD\"",
    "\"SITE\"",
    "\"VOL\"",
    "\"TIME\"",
    "\".c\"",
    "\".p\"",
    "\".t\"",
    "\".i\"",
    "\".r\"",
    "\".spc\"",
    "\".glq\"",
    "\".cmp\"",
    "\".rct\"",
    "\".fnc\"",
    "\".f\"",
    "\".*MY*SPECIAL*EXTENSION\"",
    "\"SUM\"",
    "\"delay\"",
    "\"floor\"",
    "\"ceil\"",
    "\"cos\"",
    "\"sin\"",
    "\"tan\"",
    "\"acos\"",
    "\"asin\"",
    "\"atan\"",
    "\"tanh\"",
    "\"cosh\"",
    "\"sec\"",
    "\"csc\"",
    "\"cot\"",
    "\"sinh\"",
    "\"arcsec\"",
    "\"arccsc\"",
    "\"arccot\"",
    "\"arcsinh\"",
    "\"arccosh\"",
    "\"arctanh\"",
    "\"arcsech\"",
    "\"arccsch\"",
    "\"arccoth\"",
    "\"sqrt\"",
    "\"factorial\"",
    "\"exp\"",
    "\"log\"",
    "\"log10\"",
    "\"abs\"",
    "\"min\"",
    "\"max\"",
    "\"PI\"",
    "\"EXPONENTIALE\"",
    "\"NaN\"",
    "\"nan\"",
    "\"NA\"",
    "\"%QFC%\"",
    "\"%ModTime%\"",
    "\"%ModTime.i%\"",
    "<INTEGER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\".\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"not\"",
    "\"^\"",
    "\"%\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"xor\"",
    "\"&&\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<STRING_LITERAL>",
  };

}
