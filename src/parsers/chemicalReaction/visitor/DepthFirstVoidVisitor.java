/* Generated by JTB 1.4.4 */
package parsers.chemicalReaction.visitor;

import parsers.chemicalReaction.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first order.<br>
 * In your "Void" visitors extend this class and override part or all of these methods.
 *
 */
public class DepthFirstVoidVisitor implements IVoidVisitor {


  /*
   * Base nodes classes visit methods (to be overridden if necessary)
   */

  /**
   * Visits a {@link NodeChoice} node.
   *
   * @param n the node to visit
   */
  public void visit(final NodeChoice n) {
    n.choice.accept(this);
    return;
  }

  /**
   * Visits a {@link NodeList} node.
   *
   * @param n the node to visit
   */
  public void visit(final NodeList n) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this);
    }
    return;
  }

  /**
   * Visits a {@link NodeListOptional} node.
   *
   * @param n the node to visit
   */
  public void visit(final NodeListOptional n) {
    if (n.present()) {
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        e.next().accept(this);
        }
      return;
    } else
      return;
  }

  /**
   * Visits a {@link NodeOptional} node.
   *
   * @param n the node to visit
   */
  public void visit(final NodeOptional n) {
    if (n.present()) {
      n.node.accept(this);
      return;
    } else
    return;
  }

  /**
   * Visits a {@link NodeSequence} node.
   *
   * @param n the node to visit
   */
  public void visit(final NodeSequence n) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this);
    }
    return;
  }

  /**
   * Visits a {@link NodeToken} node.
   *
   * @param n the node to visit
   */
  public void visit(final NodeToken n) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  /*
   * User grammar generated visit methods (to be overridden if necessary)
   */

  /**
   * Visits a {@link CompleteReaction} node, whose children are the following :
   * <p>
   * reaction -> Reaction()<br>
   * nodeToken -> < EOF ><br>
   *
   * @param n the node to visit
   */
  public void visit(final CompleteReaction n) {
    // reaction -> Reaction()
    n.reaction.accept(this);
    // nodeToken -> < EOF >
    n.nodeToken.accept(this);
  }

  /**
   * Visits a {@link CompleteSpeciesWithCoefficient} node, whose children are the following :
   * <p>
   * speciesWithCoeff -> SpeciesWithCoeff()<br>
   * nodeToken -> < EOF ><br>
   *
   * @param n the node to visit
   */
  public void visit(final CompleteSpeciesWithCoefficient n) {
    // speciesWithCoeff -> SpeciesWithCoeff()
    n.speciesWithCoeff.accept(this);
    // nodeToken -> < EOF >
    n.nodeToken.accept(this);
  }

  /**
   * Visits a {@link Reaction} node, whose children are the following :
   * <p>
   * nodeChoice -> . %0 #0 ( AdditiveExpression() )+<br>
   * .......... .. . .. #1 ( Blank() )* #2 < ARROW ><br>
   * .......... .. . .. #3 ( $0 ( " " )<br>
   * .......... .. . .. .. . $1 ( Blank() )*<br>
   * .......... .. . .. .. . $2 ( AdditiveExpression() )+ )*<br>
   * .......... .. . .. #4 ( $0 ( Blank() )* $1 ";"<br>
   * .......... .. . .. .. . $2 ( Blank() )* $3 ListModifiers() )?<br>
   * .......... .. | %1 #0 < ARROW2 ><br>
   * .......... .. . .. #1 ( Blank() )*<br>
   * .......... .. . .. #2 ( AdditiveExpression() )+<br>
   * .......... .. . .. #3 ( $0 ( Blank() )* $1 ";"<br>
   * .......... .. . .. .. . $2 ( Blank() )* $3 ListModifiers() )?<br>
   *
   * @param n the node to visit
   */
  public void visit(final Reaction n) {
    // nodeChoice -> . %0 #0 ( AdditiveExpression() )+
    // .......... .. . .. #1 ( Blank() )* #2 < ARROW >
    // .......... .. . .. #3 ( $0 ( " " )
    // .......... .. . .. .. . $1 ( Blank() )*
    // .......... .. . .. .. . $2 ( AdditiveExpression() )+ )*
    // .......... .. . .. #4 ( $0 ( Blank() )* $1 ";"
    // .......... .. . .. .. . $2 ( Blank() )* $3 ListModifiers() )?
    // .......... .. | %1 #0 < ARROW2 >
    // .......... .. . .. #1 ( Blank() )*
    // .......... .. . .. #2 ( AdditiveExpression() )+
    // .......... .. . .. #3 ( $0 ( Blank() )* $1 ";"
    // .......... .. . .. .. . $2 ( Blank() )* $3 ListModifiers() )?
    n.nodeChoice.accept(this);
  }

  /**
   * Visits a {@link AdditiveExpression} node, whose children are the following :
   * <p>
   * speciesWithCoeff -> SpeciesWithCoeff()<br>
   * nodeListOptional -> ( #0 ( Blank() )* #1 " + "<br>
   * ................ .. . #2 ( Blank() )* #3 SpeciesWithCoeff() )*<br>
   *
   * @param n the node to visit
   */
  public void visit(final AdditiveExpression n) {
    // speciesWithCoeff -> SpeciesWithCoeff()
    n.speciesWithCoeff.accept(this);
    // nodeListOptional -> ( #0 ( Blank() )* #1 " + "
    // ................ .. . #2 ( Blank() )* #3 SpeciesWithCoeff() )*
    n.nodeListOptional.accept(this);
  }

  /**
   * Visits a {@link SpeciesWithCoeff} node, whose children are the following :
   * <p>
   * nodeOptional -> ( #0 Stoichiometry()<br>
   * ............ .. . #1 ( Blank() )* #2 " * "<br>
   * ............ .. . #3 ( Blank() )* )?<br>
   * species -> Species()<br>
   *
   * @param n the node to visit
   */
  public void visit(final SpeciesWithCoeff n) {
    // nodeOptional -> ( #0 Stoichiometry()
    // ............ .. . #1 ( Blank() )* #2 "// "
    // ............ .. . #3 ( Blank() )* )?
    n.nodeOptional.accept(this);
    // species -> Species()
    n.species.accept(this);
  }

  /**
   * Visits a {@link Blank} node, whose children are the following :
   * <p>
   * nodeToken -> " "<br>
   *
   * @param n the node to visit
   */
  public void visit(final Blank n) {
    // nodeToken -> " "
    n.nodeToken.accept(this);
  }

  /**
   * Visits a {@link ListModifiers} node, whose children are the following :
   * <p>
   * species -> Species()<br>
   * nodeListOptional -> ( #0 ( Blank() )+ #1 Species() )*<br>
   *
   * @param n the node to visit
   */
  public void visit(final ListModifiers n) {
    // species -> Species()
    n.species.accept(this);
    // nodeListOptional -> ( #0 ( Blank() )+ #1 Species() )*
    n.nodeListOptional.accept(this);
  }

  /**
   * Visits a {@link Species} node, whose children are the following :
   * <p>
   * nodeToken -> < IDENTIFIER ><br>
   *
   * @param n the node to visit
   */
  public void visit(final Species n) {
    // nodeToken -> < IDENTIFIER >
    n.nodeToken.accept(this);
  }

  /**
   * Visits a {@link Stoichiometry} node, whose children are the following :
   * <p>
   * nodeChoice -> . %0 < INTEGER_LITERAL ><br>
   * .......... .. | %1 < FLOATING_POINT_LITERAL ><br>
   *
   * @param n the node to visit
   */
  public void visit(final Stoichiometry n) {
    // nodeChoice -> . %0 < INTEGER_LITERAL >
    // .......... .. | %1 < FLOATING_POINT_LITERAL >
    n.nodeChoice.accept(this);
  }

}
