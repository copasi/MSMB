/* Generated By:JavaCC: Do not edit this line. MR_MultistateSpecies_Parser.java */
package parsers.multistateSpecies;

import parsers.multistateSpecies.syntaxtree.*;
import parsers.multistateSpecies.visitor.*;
import java.io.*;
import parsers.mathExpression.MR_Expression_ParserConstants;
import parsers.multistateSpecies.syntaxtree.*;


public class MR_MultistateSpecies_Parser implements MR_MultistateSpecies_ParserConstants {

  public static void main(String args[]) {
    System.out.println("Nothing MR_ChemicalReaction_Parser...");
    try {
      String expression = new String("Cdh1(P{1:10})");
      InputStream is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      MR_MultistateSpecies_Parser react = new MR_MultistateSpecies_Parser(is);
      CompleteMultistateSpecies start = react.CompleteMultistateSpecies();
      DepthFirstVoidVisitor v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(p{1})");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(P{1,2,ciao})");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(P{1:4,6,ciao})");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(P{1:4,6,PREC,\u005c"prec\u005c"})");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      System.out.println(".......OPERATORS.....................");
      expression = new String("Cdh1(++(p))");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      CompleteMultistateSpecies_Operator op = react.CompleteMultistateSpecies_Operator();
      v = new MyVisitor();
      op.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(--(p);<<(q))");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      op = react.CompleteMultistateSpecies_Operator();
      v = new MyVisitor();
      op.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(>>(\u005c"Time\u005c");<<(q))");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_MultistateSpecies_Parser(is);
      op = react.CompleteMultistateSpecies_Operator();
      v = new MyVisitor();
      op.accept(v);
      System.out.println("...................................");
    }
    catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

  final public CompleteMultistateSpecies CompleteMultistateSpecies() throws ParseException {
  // --- JTB generated node declarations ---
  MultistateSpecies n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
    n0 = MultistateSpecies();
    n2 = jj_consume_token(0);
    n2.beginColumn++;
    n2.endColumn++;
    { n1 = JTBToolkit.makeNodeToken(n2); }
    {if (true) return new CompleteMultistateSpecies(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public CompleteMultistateSpecies_Operator CompleteMultistateSpecies_Operator() throws ParseException, ParseException {
  // --- JTB generated node declarations ---
  MultistateSpecies_Operator n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
    n0 = MultistateSpecies_Operator();
    n2 = jj_consume_token(0);
    n2.beginColumn++;
    n2.endColumn++;
    { n1 = JTBToolkit.makeNodeToken(n2); }
    {if (true) return new CompleteMultistateSpecies_Operator(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public CompleteMultistateSpecies_Range CompleteMultistateSpecies_Range() throws ParseException, ParseException {
  // --- JTB generated node declarations ---
  MultistateSpecies_SiteSingleElement_Range n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
    n0 = MultistateSpecies_SiteSingleElement_Range();
    n2 = jj_consume_token(0);
    n2.beginColumn++;
    n2.endColumn++;
    { n1 = JTBToolkit.makeNodeToken(n2); }
    {if (true) return new CompleteMultistateSpecies_Range(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public MultistateSpecies MultistateSpecies() throws ParseException, ParseException {
  // --- JTB generated node declarations ---
  MultistateSpecies_Name n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  MultistateSpecies_SingleStateDefinition n5 = null;
  NodeListOptional n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  MultistateSpecies_SingleStateDefinition n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
    n0 = MultistateSpecies_Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_R:
      n6 = new NodeListOptional();
      n2 = new NodeSequence(4);
      n4 = jj_consume_token(OPEN_R);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = MultistateSpecies_SingleStateDefinition();
      n2.addNode(n5);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SITE_NAMES_SEPARATOR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        n7 = new NodeSequence(2);
        n9 = jj_consume_token(SITE_NAMES_SEPARATOR);
        n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
        n10 = MultistateSpecies_SingleStateDefinition();
        n7.addNode(n10);
        n6.addNode(n7);
      }
      n6.nodes.trimToSize();
      n2.addNode(n6);
      n12 = jj_consume_token(CLOSED_R);
      n11 = JTBToolkit.makeNodeToken(n12);
      n2.addNode(n11);
      n1.addNode(n2);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    {if (true) return new MultistateSpecies(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public MultistateSpecies_SingleStateDefinition MultistateSpecies_SingleStateDefinition() throws ParseException, ParseException {
  // --- JTB generated node declarations ---
  MultistateSpecies_SiteName n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  MultistateSpecies_SiteSingleElement n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  MultistateSpecies_SiteSingleElement n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
    n0 = MultistateSpecies_SiteName();
    n2 = jj_consume_token(OPEN_C);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = MultistateSpecies_SiteSingleElement();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SITE_STATES_SEPARATOR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      n5 = new NodeSequence(2);
      n7 = jj_consume_token(SITE_STATES_SEPARATOR);
      n6 = JTBToolkit.makeNodeToken(n7);
      n5.addNode(n6);
      n8 = MultistateSpecies_SiteSingleElement();
      n5.addNode(n8);
      n4.addNode(n5);
    }
    n4.nodes.trimToSize();
    n10 = jj_consume_token(CLOSED_C);
    n9 = JTBToolkit.makeNodeToken(n10);
    {if (true) return new MultistateSpecies_SingleStateDefinition(n0, n1, n3, n4, n9);}
    throw new Error("Missing return statement in function");
  }

  final public MultistateSpecies_Name MultistateSpecies_Name() throws ParseException, ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeList n3 = new NodeList();
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      n2 = jj_consume_token(STRING_LITERAL);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case CLOSED_R:
    case CLOSED_C:
    case RANGE_SEPARATOR:
    case SITE_NAMES_SEPARATOR:
    case SITE_STATES_SEPARATOR:
    case MULTI_IDENTIFIER:
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTI_IDENTIFIER:
          n6 = jj_consume_token(MULTI_IDENTIFIER);
          n5 = JTBToolkit.makeNodeToken(n6);
          n4 = new NodeChoice(n5, 0, 6);
          break;
        case CLOSED_R:
          n8 = jj_consume_token(CLOSED_R);
          n7 = JTBToolkit.makeNodeToken(n8);
          n4 = new NodeChoice(n7, 1, 6);
          break;
        case SITE_NAMES_SEPARATOR:
          n10 = jj_consume_token(SITE_NAMES_SEPARATOR);
          n9 = JTBToolkit.makeNodeToken(n10);
          n4 = new NodeChoice(n9, 2, 6);
          break;
        case RANGE_SEPARATOR:
          n12 = jj_consume_token(RANGE_SEPARATOR);
          n11 = JTBToolkit.makeNodeToken(n12);
          n4 = new NodeChoice(n11, 3, 6);
          break;
        case SITE_STATES_SEPARATOR:
          n14 = jj_consume_token(SITE_STATES_SEPARATOR);
          n13 = JTBToolkit.makeNodeToken(n14);
          n4 = new NodeChoice(n13, 4, 6);
          break;
        case CLOSED_C:
          n16 = jj_consume_token(CLOSED_C);
          n15 = JTBToolkit.makeNodeToken(n16);
          n4 = new NodeChoice(n15, 5, 6);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        n3.addNode(n4);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLOSED_R:
        case CLOSED_C:
        case RANGE_SEPARATOR:
        case SITE_NAMES_SEPARATOR:
        case SITE_STATES_SEPARATOR:
        case MULTI_IDENTIFIER:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
      }
      n3.nodes.trimToSize();
      n0 = new NodeChoice(n3, 1, 2);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new MultistateSpecies_Name(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MultistateSpecies_SiteSingleElement MultistateSpecies_SiteSingleElement() throws ParseException, ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  MultistateSpecies_SiteSingleElement_Range n3 = null;
  NodeList n4 = new NodeList();
  NodeChoice n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      n2 = jj_consume_token(STRING_LITERAL);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 3);
      break;
    default:
      jj_la1[8] = jj_gen;
      if (jj_2_1(3)) {
        n3 = MultistateSpecies_SiteSingleElement_Range();
      n0 = new NodeChoice(n3, 1, 3);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPEN_R:
        case RANGE_SEPARATOR:
        case NUMBER:
        case MULTI_IDENTIFIER:
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case MULTI_IDENTIFIER:
              n7 = jj_consume_token(MULTI_IDENTIFIER);
          n6 = JTBToolkit.makeNodeToken(n7);
          n5 = new NodeChoice(n6, 0, 4);
              break;
            case NUMBER:
              n9 = jj_consume_token(NUMBER);
          n8 = JTBToolkit.makeNodeToken(n9);
          n5 = new NodeChoice(n8, 1, 4);
              break;
            case OPEN_R:
              n11 = jj_consume_token(OPEN_R);
          n10 = JTBToolkit.makeNodeToken(n11);
          n5 = new NodeChoice(n10, 2, 4);
              break;
            case RANGE_SEPARATOR:
              n13 = jj_consume_token(RANGE_SEPARATOR);
          n12 = JTBToolkit.makeNodeToken(n13);
          n5 = new NodeChoice(n12, 3, 4);
              break;
            default:
              jj_la1[6] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
        n4.addNode(n5);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OPEN_R:
            case RANGE_SEPARATOR:
            case NUMBER:
            case MULTI_IDENTIFIER:
              ;
              break;
            default:
              jj_la1[7] = jj_gen;
              break label_4;
            }
          }
      n4.nodes.trimToSize();
      n0 = new NodeChoice(n4, 2, 3);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return new MultistateSpecies_SiteSingleElement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MultistateSpecies_SiteSingleElement_Range MultistateSpecies_SiteSingleElement_Range() throws ParseException, ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeListOptional n7 = new NodeListOptional();
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
    n1 = jj_consume_token(NUMBER);
    n0 = JTBToolkit.makeNodeToken(n1);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BLANK:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      n4 = jj_consume_token(BLANK);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
    }
    n2.nodes.trimToSize();
    n6 = jj_consume_token(RANGE_SEPARATOR);
    n5 = JTBToolkit.makeNodeToken(n6);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BLANK:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      n9 = jj_consume_token(BLANK);
      n8 = JTBToolkit.makeNodeToken(n9);
      n7.addNode(n8);
    }
    n7.nodes.trimToSize();
    n11 = jj_consume_token(NUMBER);
    n10 = JTBToolkit.makeNodeToken(n11);
    {if (true) return new MultistateSpecies_SiteSingleElement_Range(n0, n2, n5, n7, n10);}
    throw new Error("Missing return statement in function");
  }

  final public MultistateSpecies_SiteName MultistateSpecies_SiteName() throws ParseException, ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeList n3 = new NodeList();
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      n2 = jj_consume_token(STRING_LITERAL);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case OPEN_R:
    case CLOSED_R:
    case CLOSED_C:
    case RANGE_SEPARATOR:
    case SITE_STATES_SEPARATOR:
    case MULTI_IDENTIFIER:
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTI_IDENTIFIER:
          n6 = jj_consume_token(MULTI_IDENTIFIER);
          n5 = JTBToolkit.makeNodeToken(n6);
          n4 = new NodeChoice(n5, 0, 6);
          break;
        case CLOSED_C:
          n8 = jj_consume_token(CLOSED_C);
          n7 = JTBToolkit.makeNodeToken(n8);
          n4 = new NodeChoice(n7, 1, 6);
          break;
        case OPEN_R:
          n10 = jj_consume_token(OPEN_R);
          n9 = JTBToolkit.makeNodeToken(n10);
          n4 = new NodeChoice(n9, 2, 6);
          break;
        case CLOSED_R:
          n12 = jj_consume_token(CLOSED_R);
          n11 = JTBToolkit.makeNodeToken(n12);
          n4 = new NodeChoice(n11, 3, 6);
          break;
        case RANGE_SEPARATOR:
          n14 = jj_consume_token(RANGE_SEPARATOR);
          n13 = JTBToolkit.makeNodeToken(n14);
          n4 = new NodeChoice(n13, 4, 6);
          break;
        case SITE_STATES_SEPARATOR:
          n16 = jj_consume_token(SITE_STATES_SEPARATOR);
          n15 = JTBToolkit.makeNodeToken(n16);
          n4 = new NodeChoice(n15, 5, 6);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        n3.addNode(n4);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPEN_R:
        case CLOSED_R:
        case CLOSED_C:
        case RANGE_SEPARATOR:
        case SITE_STATES_SEPARATOR:
        case MULTI_IDENTIFIER:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_7;
        }
      }
      n3.nodes.trimToSize();
      n0 = new NodeChoice(n3, 1, 2);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new MultistateSpecies_SiteName(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MultistateSpecies_Operator MultistateSpecies_Operator() throws ParseException, ParseException {
  // --- JTB generated node declarations ---
  MultistateSpecies_Name n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  MultistateSpecies_Operator_SingleSite n5 = null;
  NodeListOptional n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  MultistateSpecies_Operator_SingleSite n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
    n0 = MultistateSpecies_Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_R:
      n6 = new NodeListOptional();
      n2 = new NodeSequence(4);
      n4 = jj_consume_token(OPEN_R);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = MultistateSpecies_Operator_SingleSite();
      n2.addNode(n5);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SITE_NAMES_SEPARATOR:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_8;
        }
        n7 = new NodeSequence(2);
        n9 = jj_consume_token(SITE_NAMES_SEPARATOR);
        n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
        n10 = MultistateSpecies_Operator_SingleSite();
        n7.addNode(n10);
        n6.addNode(n7);
      }
      n6.nodes.trimToSize();
      n2.addNode(n6);
      n12 = jj_consume_token(CLOSED_R);
      n11 = JTBToolkit.makeNodeToken(n12);
      n2.addNode(n11);
      n1.addNode(n2);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    {if (true) return new MultistateSpecies_Operator(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public MultistateSpecies_Operator_SingleSite MultistateSpecies_Operator_SingleSite() throws ParseException, ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  MultistateSpecies_Operator_SiteName n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  MultistateSpecies_Operator_SiteSingleState n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeChoice n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  MultistateSpecies_Operator_SiteName n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_R:
    case RANGE_SEPARATOR:
    case STRING_LITERAL:
    case NUMBER:
    case MULTI_IDENTIFIER:
      n1 = new NodeSequence(2);
      n2 = MultistateSpecies_Operator_SiteName();
      n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_C:
        n4 = new NodeSequence(3);
        n6 = jj_consume_token(OPEN_C);
        n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
        n7 = MultistateSpecies_Operator_SiteSingleState();
        n4.addNode(n7);
        n9 = jj_consume_token(CLOSED_C);
        n8 = JTBToolkit.makeNodeToken(n9);
        n4.addNode(n8);
        n3.addNode(n4);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      n1.addNode(n3);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case SUCC:
    case PREC:
    case CIRC_L_SHIFT:
    case CIRC_R_SHIFT:
      n10 = new NodeSequence(4);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUCC:
        n13 = jj_consume_token(SUCC);
          n12 = JTBToolkit.makeNodeToken(n13);
          n11 = new NodeChoice(n12, 0, 4);
        break;
      case PREC:
        n15 = jj_consume_token(PREC);
          n14 = JTBToolkit.makeNodeToken(n15);
          n11 = new NodeChoice(n14, 1, 4);
        break;
      case CIRC_L_SHIFT:
        n17 = jj_consume_token(CIRC_L_SHIFT);
          n16 = JTBToolkit.makeNodeToken(n17);
          n11 = new NodeChoice(n16, 2, 4);
        break;
      case CIRC_R_SHIFT:
        n19 = jj_consume_token(CIRC_R_SHIFT);
          n18 = JTBToolkit.makeNodeToken(n19);
          n11 = new NodeChoice(n18, 3, 4);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n10.addNode(n11);
      n21 = jj_consume_token(OPEN_R);
      n20 = JTBToolkit.makeNodeToken(n21);
      n10.addNode(n20);
      n22 = MultistateSpecies_Operator_SiteName();
      n10.addNode(n22);
      n24 = jj_consume_token(CLOSED_R);
      n23 = JTBToolkit.makeNodeToken(n24);
      n10.addNode(n23);
      n0 = new NodeChoice(n10, 1, 2);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new MultistateSpecies_Operator_SingleSite(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MultistateSpecies_Operator_SiteName MultistateSpecies_Operator_SiteName() throws ParseException, ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeList n3 = new NodeList();
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      n2 = jj_consume_token(STRING_LITERAL);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case OPEN_R:
    case RANGE_SEPARATOR:
    case NUMBER:
    case MULTI_IDENTIFIER:
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTI_IDENTIFIER:
          n6 = jj_consume_token(MULTI_IDENTIFIER);
          n5 = JTBToolkit.makeNodeToken(n6);
          n4 = new NodeChoice(n5, 0, 4);
          break;
        case NUMBER:
          n8 = jj_consume_token(NUMBER);
          n7 = JTBToolkit.makeNodeToken(n8);
          n4 = new NodeChoice(n7, 1, 4);
          break;
        case OPEN_R:
          n10 = jj_consume_token(OPEN_R);
          n9 = JTBToolkit.makeNodeToken(n10);
          n4 = new NodeChoice(n9, 2, 4);
          break;
        case RANGE_SEPARATOR:
          n12 = jj_consume_token(RANGE_SEPARATOR);
          n11 = JTBToolkit.makeNodeToken(n12);
          n4 = new NodeChoice(n11, 3, 4);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        n3.addNode(n4);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPEN_R:
        case RANGE_SEPARATOR:
        case NUMBER:
        case MULTI_IDENTIFIER:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_9;
        }
      }
      n3.nodes.trimToSize();
      n0 = new NodeChoice(n3, 1, 2);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new MultistateSpecies_Operator_SiteName(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MultistateSpecies_Operator_SiteSingleState MultistateSpecies_Operator_SiteSingleState() throws ParseException, ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeList n3 = new NodeList();
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      n2 = jj_consume_token(STRING_LITERAL);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case OPEN_R:
    case RANGE_SEPARATOR:
    case NUMBER:
    case MULTI_IDENTIFIER:
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTI_IDENTIFIER:
          n6 = jj_consume_token(MULTI_IDENTIFIER);
          n5 = JTBToolkit.makeNodeToken(n6);
          n4 = new NodeChoice(n5, 0, 4);
          break;
        case NUMBER:
          n8 = jj_consume_token(NUMBER);
          n7 = JTBToolkit.makeNodeToken(n8);
          n4 = new NodeChoice(n7, 1, 4);
          break;
        case OPEN_R:
          n10 = jj_consume_token(OPEN_R);
          n9 = JTBToolkit.makeNodeToken(n10);
          n4 = new NodeChoice(n9, 2, 4);
          break;
        case RANGE_SEPARATOR:
          n12 = jj_consume_token(RANGE_SEPARATOR);
          n11 = JTBToolkit.makeNodeToken(n12);
          n4 = new NodeChoice(n11, 3, 4);
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        n3.addNode(n4);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPEN_R:
        case RANGE_SEPARATOR:
        case NUMBER:
        case MULTI_IDENTIFIER:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_10;
        }
      }
      n3.nodes.trimToSize();
      n0 = new NodeChoice(n3, 1, 2);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new MultistateSpecies_Operator_SiteSingleState(n0);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(BLANK)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(BLANK)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(NUMBER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_12()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RANGE_SEPARATOR)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_13()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MR_MultistateSpecies_ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200000,0x10000,0x400000,0x27a0000,0x27a0000,0x2fa0000,0x3110000,0x3110000,0x800000,0x3110000,0x8000,0x8000,0x25b0000,0x25b0000,0x2db0000,0x200000,0x10000,0x40000,0x7800,0x3917800,0x3110000,0x3110000,0x3910000,0x3110000,0x3110000,0x3910000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MR_MultistateSpecies_Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MR_MultistateSpecies_Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MR_MultistateSpecies_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MR_MultistateSpecies_Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MR_MultistateSpecies_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MR_MultistateSpecies_Parser(MR_MultistateSpecies_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MR_MultistateSpecies_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}


class MyVisitor extends DepthFirstVoidVisitor {

  public void visit(NodeToken n) {
    System.out.println("visit " + MR_MultistateSpecies_ParserConstants.tokenImage[n.kind] + "-->" + n.tokenImage);
  }

  @Override public void visit(MultistateSpecies n) {
    System.out.println("MultistateSpecies");
    super.visit(n);
  }

  @Override public void visit(MultistateSpecies_SiteSingleElement_Range n) {
    System.out.println("RAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANGE");
    super.visit(n);
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}
