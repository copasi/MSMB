/**
 * JTB template file created by SF JavaCC plugin 1.5.17+ wizard for JTB 1.4.0.2+ and JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";
  JTB_P="parsers.multistateSpecies";
  STATIC = false;
  JTB_JD=true;
  JTB_F=true;
  JTB_PRINTER=true;
  JTB_W=false; //Do not overwrite existing files}PARSER_BEGIN(MR_MultistateSpecies_Parser)
package parsers.multistateSpecies;

import parsers.multistateSpecies.syntaxtree.*;
import parsers.multistateSpecies.visitor.*;
import java.io.*;
import parsers.mathExpression.MR_Expression_ParserConstants;


public class MR_MultistateSpecies_Parser
{
  public static void main(String args [])
  {
      System.out.println("MR_MultistateSpecies_Parser...");

    try
    {
      String expression = new String("Cdh1(P{1:10})");
      InputStream is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  MR_MultistateSpecies_Parser react = new MR_MultistateSpecies_Parser(is);
  	  CompleteMultistateSpecies start = react.CompleteMultistateSpecies();
      DepthFirstVoidVisitor v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
       expression = new String("c");
	  is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_MultistateSpecies_Parser(is);
  	  start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1");
	  is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_MultistateSpecies_Parser(is);
  	  start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
       expression = new String("Cdh1(p{1})");
	  is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_MultistateSpecies_Parser(is);
  	  start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
          expression = new String("Cdh1(p{1};q{4})");
	  is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_MultistateSpecies_Parser(is);
  	  start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
     
      expression = new String("Cdh1(P{1,2,ciao})");
	  is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_MultistateSpecies_Parser(is);
  	  start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(P{1:4,6,ciao})");
	  is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_MultistateSpecies_Parser(is);
  	  start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
       expression = new String("Cdh1(P{1:4,6,PRED,\"pred\"})");
	  is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_MultistateSpecies_Parser(is);
  	  start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
	 System.out.println(".......OPERATORS.....................");
     //  expression = new String("Cdh1(--(p);<<(q))");
	   expression = new String("Cdh1(pred(p);pred(q))");
	  is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_MultistateSpecies_Parser(is);
  	   CompleteMultistateSpecies_Operator op = react.CompleteMultistateSpecies_Operator();
      v = new MyVisitor();
      op.accept(v);
      System.out.println("...................................");
      // expression = new String("Cdh1(++(p))");
	   expression = new String("Cdh1(succ(p))");
	  is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_MultistateSpecies_Parser(is);
  	   op = react.CompleteMultistateSpecies_Operator();
      v = new MyVisitor();
      op.accept(v);
      System.out.println("...................................");
     // expression = new String("Cdh1(>>(\"Time\");<<(q))");
	   expression = new String("Cdh1(succ(\"Time\");pred(q))");
	  is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_MultistateSpecies_Parser(is);
  	   op = react.CompleteMultistateSpecies_Operator();
      v = new MyVisitor();
      op.accept(v);
      System.out.println("...................................");

        expression = new String("Cdh1(p{0:10}c)");
	  is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_MultistateSpecies_Parser(is);
  	  start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
     expression = new String("Cdh1(p{0:10}c;q{true,false})");
	  is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_MultistateSpecies_Parser(is);
  	  start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");

      expression = new String("\"_Beta_-Catenin\"(cmp{\"Plasma Membrane\"})");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_MultistateSpecies_Parser(is);
  	  start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");

       expression = new String("\"_Beta_-Catenin\"(cmp{\"Plasma Membrane\"}).spc.c");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_MultistateSpecies_Parser(is);
  	  start = react.CompleteMultistateSpecies();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      
     }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

class MyVisitor extends DepthFirstVoidVisitor
{
  public void visit(NodeToken n)
  {
    
    System.out.println("visit " + MR_MultistateSpecies_ParserConstants.tokenImage[n.kind] + "-->" + n.tokenImage);
  }

  	@Override
	public void visit(MultistateSpecies n) {
	 System.out.println("MultistateSpecies");
	 super.visit(n); 
    
	}

	/*	@Override
	public void visit(MultistateSpecies_SiteSingleElement_Range n) {
	 System.out.println("RAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANGE");
	 super.visit(n); 
    
	}
*/
			  
}


PARSER_END(MR_MultistateSpecies_Parser)
SKIP :{"\t" | "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}

TOKEN : /* KEYWORDS */
{
  < TIME: "Time">
| < SUM: "SUM">
| < FLOOR: "floor">
| < SQRT: "sqrt"> 
| < LOG: "log">
| < SUCC: "succ">
| < PREC: "pred">
| < CIRCULAR_FLAG: "c">

//| < CIRC_L_SHIFT: "<<">
//| < CIRC_R_SHIFT: ">>">
}
TOKEN : {
  < BLANK : " ">
| < OPEN_R : "("> | < CLOSED_R : ")">| < OPEN_C : "{"> | < CLOSED_C : "}">
| < RANGE_SEPARATOR : ":">
| < SITE_NAMES_SEPARATOR : ";">
| < SITE_STATES_SEPARATOR : ",">
| < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >| < NUMBER : ([ "0"-"9" ])+ >
| < MULTI_IDENTIFIER : (["A"-"Z", "_", "a"-"z","'",
						"<", ">", "|", "&",
						"!",  "@", "#", "$", "%", "^",
						"+", "*", "-", "/", "~", "`", 
						"[", "]"
						] | < NUMBER > | < UNDEFINED_SITE_SYMBOL >)+ >
| < UNDEFINED_SITE_SYMBOL : "?" >
| < EXTENSION_CONC :  ".c" >
| < EXTENSION_PARTICLE :  ".p" >
| < EXTENSION_TRANS :  ".t" >
| < EXTENSION_INIT :  ".i" >
| < EXTENSION_RATE :  ".r" >
| < EXTENSION_SPECIES :  ".spc" >
| < EXTENSION_GLOBALQ :  ".glq" >
| < EXTENSION_COMPARTMENT :  ".cmp" >
| < EXTENSION_REACTION :  ".rct" >
| < EXTENSION_FUNCTION :  ".fnc" >
| < EXTENSION_FLUX :  ".f" >				
}

void CompleteMultistateSpecies() : {} {
  MultistateSpecies() (PossibleExtensions())* <EOF>
}

void CompleteMultistateSpecies_Operator()  throws ParseException:
{}
{
  MultistateSpecies_Operator() (PossibleExtensions())* < EOF >
}

void CompleteMultistateSpecies_Range()  throws ParseException:
{}
{
  MultistateSpecies_SiteSingleElement_Range() < EOF >
 }


void CompleteMultistateSpecies_RangeString()  throws ParseException: 
{}
{
 MultistateSpecies_SiteSingleElement() < EOF > 
}

void PossibleExtensions() :{}
{
  
    < EXTENSION_CONC > 	| < EXTENSION_COMPARTMENT > | < EXTENSION_PARTICLE >
  	| < EXTENSION_TRANS > | < EXTENSION_INIT > 	| < EXTENSION_RATE >
  	| < EXTENSION_SPECIES >  | < EXTENSION_GLOBALQ >
  	| < EXTENSION_FUNCTION > | < EXTENSION_REACTION >
	| < EXTENSION_FLUX >
 	
}

void MultistateSpecies() throws ParseException:
{}
{
  MultistateSpecies_Name()  (< OPEN_R >
  		 MultistateSpecies_SingleStateDefinition()
  		(< SITE_NAMES_SEPARATOR >
  		MultistateSpecies_SingleStateDefinition())*
  < CLOSED_R >)?
}
 
void MultistateSpecies_SingleStateDefinition() throws ParseException:
{}
{
MultistateSpecies_SiteName() < OPEN_C >
  				MultistateSpecies_SiteSingleElement() (< SITE_STATES_SEPARATOR > MultistateSpecies_SiteSingleElement())*
  		< CLOSED_C > ( < CIRCULAR_FLAG >)?
}

void MultistateSpecies_Name() throws ParseException:
{}
{
   < STRING_LITERAL >
  | (< MULTI_IDENTIFIER > | < CIRCULAR_FLAG >
  		| < CLOSED_R> | < SITE_NAMES_SEPARATOR > | < RANGE_SEPARATOR >
  		| 	< SITE_STATES_SEPARATOR >  | < CLOSED_C >
  	)+
} 

void MultistateSpecies_SiteSingleElement() throws ParseException:
{}
{
     ( < STRING_LITERAL > | (< MULTI_IDENTIFIER >| < NUMBER > | < OPEN_R >  )+)
   (  (" ")* < RANGE_SEPARATOR > (" ")* ( < STRING_LITERAL > | (< MULTI_IDENTIFIER >| < NUMBER > | < OPEN_R >  )+) )?
}

void MultistateSpecies_SiteSingleElement_Range() throws ParseException:
{}
{
	< NUMBER > (" ")* < RANGE_SEPARATOR > (" ")* < NUMBER > 
}





void MultistateSpecies_SiteName() throws ParseException:
{}
{
  < STRING_LITERAL >
 | (< MULTI_IDENTIFIER > |
 	< CLOSED_C > | < OPEN_R >| < CLOSED_R>  | 	< SITE_STATES_SEPARATOR >
   	)+
 	
}



void MultistateSpecies_Operator()  throws ParseException:
{}
{
  MultistateSpecies_Name()  (< OPEN_R >
  		MultistateSpecies_Operator_SingleSite()
  		(< SITE_NAMES_SEPARATOR > MultistateSpecies_Operator_SingleSite())*
  < CLOSED_R >)?
}

void MultistateSpecies_Operator_SingleSite()  throws ParseException:
{}
{
  (< SUCC > | < PREC > ) //| < CIRC_L_SHIFT > | <  CIRC_R_SHIFT >)
  	< OPEN_R >
  	MultistateSpecies_Operator_SiteName()	
  	< CLOSED_R>
| 	MultistateSpecies_Operator_SiteName() (< OPEN_C>  MultistateSpecies_Operator_SiteSingleState()  < CLOSED_C>)?
   
}

void MultistateSpecies_Operator_SiteName()  throws ParseException:
{}
{
 < STRING_LITERAL >
  | (< MULTI_IDENTIFIER >| < NUMBER > )+//| < OPEN_R >|  < RANGE_SEPARATOR > )+
 }

 void MultistateSpecies_Operator_SiteSingleState() throws ParseException:
{}
{
   < STRING_LITERAL >
  | (< MULTI_IDENTIFIER >| < NUMBER > )+//| < OPEN_R >|  < RANGE_SEPARATOR > )+
}