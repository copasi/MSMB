/* Generated by JTB 1.4.4 */
package parsers.mathExpression.syntaxtree;

import parsers.mathExpression.visitor.*;

/**
 * JTB node class for the production Expression:<br>
 * Corresponding grammar :<br>
 * additiveExpression -> AdditiveExpression()<br>
 * nodeOptional -> ( #0 RelationalOperator() #1 Expression()<br>
 * ............ .. . #2 ( $0 LogicalOperator() $1 Expression() )* )?<br>
 */
public class Expression implements INode {

  /** A child node */
  public AdditiveExpression additiveExpression;

  /** A child node */
  public NodeOptional nodeOptional;

  /** The serial version uid */
  private static final long serialVersionUID = 144L;

  /**
   * Constructs the node with all its children nodes.
   *
   * @param n0 first child node
   * @param n1 next child node
   */
  public Expression(final AdditiveExpression n0, final NodeOptional n1) {
    additiveExpression = n0;
    nodeOptional = n1;
  }

  /**
   * Accepts the IRetArguVisitor visitor.
   *
   * @param <R> the user return type
   * @param <A> the user argument type
   * @param vis the visitor
   * @param argu a user chosen argument
   * @return a user chosen return information
   */
  public <R, A> R accept(final IRetArguVisitor<R, A> vis, final A argu) {
    return vis.visit(this, argu);
  }

  /**
   * Accepts the IRetVisitor visitor.
   *
   * @param <R> the user return type
   * @param vis the visitor
   * @return a user chosen return information
   */
  public <R> R accept(final IRetVisitor<R> vis) {
    return vis.visit(this);
  }

  /**
   * Accepts the IVoidArguVisitor visitor.
   *
   * @param <A> the user argument type
   * @param vis the visitor
   * @param argu a user chosen argument
   */
  public <A> void accept(final IVoidArguVisitor<A> vis, final A argu) {
    vis.visit(this, argu);
  }

  /**
   * Accepts the IVoidVisitor visitor.
   *
   * @param vis the visitor
   */
  public void accept(final IVoidVisitor vis) {
    vis.visit(this);
  }

}
