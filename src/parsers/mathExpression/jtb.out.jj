/* Generated by JTB 1.4.4 */


options
{
  JDK_VERSION = "1.5";
  STATIC = false;
  // JTB_JD = true;
  // JTB_F = true;
  // JTB_PRINTER = true;
  // JTB_P = "parsers.mathExpression";
  // JTB_W = false;
}

PARSER_BEGIN(MR_Expression_Parser)
package parsers.mathExpression;

import parsers.mathExpression.syntaxtree.*;
import parsers.mathExpression.visitor.*;
import java.io.*;
import parsers.mathExpression.syntaxtree.*;


public class MR_Expression_Parser {

  public static void main(String args[]) {
    try {
      String expression = new String("1*floor(Time/tau)");
      InputStream is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      MR_Expression_Parser react = new MR_Expression_Parser(is);
      CompleteExpression start = react.CompleteExpression();
      DepthFirstVoidVisitor v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      String expression2 = new String("(asdf < sdf && (a < 3 && a > 4)) > 1");
      InputStream is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      MR_Expression_Parser react2 = new MR_Expression_Parser(is2);
      CompleteExpression start2 = react2.CompleteExpression();
      DepthFirstVoidVisitor v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("if(ara> 0 && pulse_flag==1,cAra,dAra*ara)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("asdf < sdf xor (a < 3 && a > 4)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("if(24 < 0 xor Time < 0,Time-24*ceil(Time/24),Time-24*floor(Time/24)) > 1");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("if(X1 > 0,Ks^\"No. of transit compartment (slow)\"/6*exp(-Ks*X1)*X1^(\"No. of transit compartment (slow)\"-1),0)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("1/((exp(0.15*(-V-50))+1))");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("\"funaasdf \"(GLQ v, GLQ t)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      CompleteFunctionDeclaration start3 = react2.CompleteFunctionDeclaration();
      v2 = new MyVisitor();
      start3.accept(v2);
      System.out.println("...................................");
      expression2 = new String("function(par1, par2, %ModTime%)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("k1*a^b");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("k1 * a^b");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("NaN");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1;p)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1;p{2,3})");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1;p{2,3}; weight(p,k1))");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1;p{0:10};q)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("kmisfoldSUB*SUB*(ROS*cytosol)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("1e-006*k*GAP*MOD");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
    }
    catch (Exception ex) {
      ex.printStackTrace();
    }
  }
}


class MyVisitor extends DepthFirstVoidVisitor {

  public void visit(NodeToken n) {
    System.out.println("visit " + MR_Expression_ParserConstants.tokenImage[n.kind] + "-->" + n.tokenImage);
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}

PARSER_END(MR_Expression_Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" ( ~["\n", "\r"] )* ( "\n"| "\r"| "\r\n" ) >
| < "/*" ( ~["*"] )* "*" ( ~["/"] ( ~["*"] )* "*" )* "/" >
}

TOKEN :
{
  < IF : "if" >
| < THEN : "then" >
| < ELSE : "else" >
| < FALSE : <FALSE_1>| <FALSE_2>| <FALSE_3> >
| < TRUE : <TRUE_1>| <TRUE_2>| <TRUE_3> >
| < #TRUE_1 : "true" >
| < #TRUE_2 : "True" >
| < #TRUE_3 : "TRUE" >
| < #FALSE_1 : "false" >
| < #FALSE_2 : "False" >
| < #FALSE_3 : "FALSE" >
| < TIME : "Time" >
| < TYPE_PAR : "GLQ" >
| < TYPE_VAR : "VAR" >
| < TYPE_SUB : "SUB" >
| < TYPE_PROD : "PROD" >
| < TYPE_MOD : "MOD" >
| < TYPE_SITE : "SITE" >
| < TYPE_VOL : "VOL" >
| < TYPE_TIME : "TIME" >
| < EXTENSION_CONC : ".c" >
| < EXTENSION_PARTICLE : ".p" >
| < EXTENSION_TRANS : ".t" >
| < EXTENSION_INIT : ".i" >
| < EXTENSION_RATE : ".r" >
| < EXTENSION_SPECIES : ".spc" >
| < EXTENSION_GLOBALQ : ".glq" >
| < EXTENSION_COMPARTMENT : ".cmp" >
| < EXTENSION_REACTION : ".rct" >
| < EXTENSION_FUNCTION : ".fnc" >
| < EXTENSION_FLUX : ".f" >
| < MY_SPECIAL_EXTENSION : ".*MY*SPECIAL*EXTENSION" >
| < SUM : "SUM" >
| < DELAY : "delay" >
| < FLOOR : "floor" >
| < CEIL : "ceil" >
| < COS : "cos" >
| < SIN : "sin" >
| < TAN : "tan" >
| < TANH : "tanh" >
| < COSH : "cosh" >
| < SQRT : "sqrt" >
| < EXP : "exp" >
| < LOG : "log" >
| < LOG10 : "log10" >
| < ABS : "abs" >
| < PI : "PI" >
| < NAN : "NaN"| "nan"| "NAN" >
| < CONST_AVOGADRO : "%NA%" >
| < CONST_QUANTITY_CONV_FACTOR : "%QFC%" >
| < CONST_MODEL_TIME : "%ModTime%" >
| < CONST_MODEL_TIME_INITIAL : "%ModTime.i%" >
}

TOKEN :
{
  < INTEGER_LITERAL : ( ["0"-"9"] )+ >
| < FLOATING_POINT_LITERAL : ( ["0"-"9"] )+ "." ( ["0"-"9"] )* ( <EXPONENT> )? ( ["f", "F", "d", "D"] )?| "." ( ["0"-"9"] )+ ( <EXPONENT> )? ( ["f", "F", "d", "D"] )?| ( ["0"-"9"] )+ <EXPONENT> ( ["f", "F", "d", "D"] )?| ( ["0"-"9"] )+ ( <EXPONENT> )? ["f", "F", "d", "D"] >
| < #EXPONENT : ["e", "E"] ( ["+", "-"] )? ( ["0"-"9"] )+ >
}

TOKEN :
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < COLON : ":" >
| < DOT : "." >
}

TOKEN :
{
  < PLUS : "+" >
| < MINUS : "-" >
| < TIMES : "*" >
| < DIV : "/" >
| < ASSIGN : "=" >
| < GT : ">" >
| < LT : "<" >
| < BANG : "!" >
| < CARET : "^" >
| < PERC : "%" >
| < EQ : "==" >
| < LEQ : "<=" >
| < GEQ : ">=" >
| < NE : "!=" >
| < OR : "||" >
| < XOR : "xor" >
| < AND : "&&" >
}

TOKEN :
{
  < IDENTIFIER : <STRING_LITERAL>| <LETTER> ( <LETTER>| <DIGIT> )* >
| < #LETTER : ["A"-"Z", "_", "a"-"z", "'"] >
| < #DIGIT : ["0"-"9"] >
| < #STRING_LITERAL : "\"" ( ( ~["\"", "\\", "\n", "\r"] )| ( "\\" ( ["n", "t", "b", "r", "f", "\\", "'", "\""]| ["0"-"7"] ( ["0"-"7"] )?| ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) )* "\"" >
}

/*****************************************
 * THE MULTIREMI EXPRESSION GRAMMAR STARTS HERE *
 *****************************************/
CompleteExpression CompleteExpression() :
{
  // --- JTB generated node declarations ---
  Expression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
}
{
  n0 = Expression()
  n2 = < EOF > {
    n2.beginColumn++;
    n2.endColumn++;
    { n1 = JTBToolkit.makeNodeToken(n2); }
  }
  { return new CompleteExpression(n0, n1); }
}

SingleFunctionCall SingleFunctionCall() :
{
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeOptional n3 = new NodeOptional();
  ArgumentList n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n0 = Name()
  n2 = < LPAREN >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  (
    n4 = ArgumentList()
    { n3.addNode(n4); }
  )?
  n6 = < RPAREN >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n8 = < EOF > {
    n8.beginColumn++;
    n8.endColumn++;
    { n7 = JTBToolkit.makeNodeToken(n8); }
  }
  { return new SingleFunctionCall(n0, n1, n3, n5, n7); }
}

CompleteFunctionDeclaration CompleteFunctionDeclaration() :
{
  // --- JTB generated node declarations ---
  FunctionDeclarator n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
}
{
  n0 = FunctionDeclarator()
  n2 = < EOF > {
    n2.beginColumn++;
    n2.endColumn++;
    { n1 = JTBToolkit.makeNodeToken(n2); }
  }
  { return new CompleteFunctionDeclaration(n0, n1); }
}

FunctionDeclarator FunctionDeclarator() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  FormalParameters n3 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    n3 = FormalParameters()
    { n2.addNode(n3); }
  )?
  { return new FunctionDeclarator(n0, n2); }
}

FormalParameters FormalParameters() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  FormalParameter n4 = null;
  NodeListOptional n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  FormalParameter n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
}
{
  n1 = "("
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    { n5 = new NodeListOptional(); }
    { n3 = new NodeSequence(2); }
    n4 = FormalParameter()
    { n3.addNode(n4); }
    (
      { n6 = new NodeSequence(2); }
      n8 = ","
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9 = FormalParameter()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
    )*
    { n5.nodes.trimToSize(); }
    { n3.addNode(n5); }
    { n2.addNode(n3); }
  ]
  n11 = ")"
  { n10 = JTBToolkit.makeNodeToken(n11); }
  { return new FormalParameters(n0, n2, n10); }
}

FormalParameter FormalParameter() :
{
  // --- JTB generated node declarations ---
  PrimitiveType n0 = null;
  VariableDeclaratorId n1 = null;
}
{
  n0 = PrimitiveType()
  n1 = VariableDeclaratorId()
  { return new FormalParameter(n0, n1); }
}

PrimitiveType PrimitiveType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
}
{
  (
    n2 = < TYPE_PAR >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 8); }
  |
    n4 = < TYPE_VAR >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 8); }
  |
    n6 = < TYPE_SUB >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 8); }
  |
    n8 = < TYPE_PROD >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n0 = new NodeChoice(n7, 3, 8); }
  |
    n10 = < TYPE_MOD >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n0 = new NodeChoice(n9, 4, 8); }
  |
    n12 = < TYPE_SITE >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n0 = new NodeChoice(n11, 5, 8); }
  |
    n14 = < TYPE_VOL >
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n0 = new NodeChoice(n13, 6, 8); }
  |
    n16 = < TYPE_TIME >
    { n15 = JTBToolkit.makeNodeToken(n16); }
    { n0 = new NodeChoice(n15, 7, 8); }
  )
  { return new PrimitiveType(n0); }
}

VariableDeclaratorId VariableDeclaratorId() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new VariableDeclaratorId(n0); }
}

IfExpression IfExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Expression n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  Expression n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
}
{
  n1 = < IF >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LPAREN >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Expression()
  n6 = < COMMA >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = Expression()
  (
    { n9 = new NodeSequence(2); }
    n11 = < COMMA >
    { n10 = JTBToolkit.makeNodeToken(n11); }
    { n9.addNode(n10); }
    n12 = Expression()
    { n9.addNode(n12); }
    { n8.addNode(n9); }
  )?
  n14 = < RPAREN >
  { n13 = JTBToolkit.makeNodeToken(n14); }
  { return new IfExpression(n0, n2, n4, n5, n7, n8, n13); }
}

Expression Expression() :
{
  // --- JTB generated node declarations ---
  AdditiveExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  RelationalOperator n3 = null;
  Expression n4 = null;
  NodeListOptional n5 = null;
  NodeSequence n6 = null;
  LogicalOperator n7 = null;
  Expression n8 = null;
}
{
  n0 = AdditiveExpression()
  (
    { n5 = new NodeListOptional(); }
    { n2 = new NodeSequence(3); }
    n3 = RelationalOperator()
    { n2.addNode(n3); }
    n4 = Expression()
    { n2.addNode(n4); }
    (
      LOOKAHEAD( 2 )
      { n6 = new NodeSequence(2); }
      n7 = LogicalOperator()
      { n6.addNode(n7); }
      n8 = Expression()
      { n6.addNode(n8); }
      { n5.addNode(n6); }
    )*
    { n5.nodes.trimToSize(); }
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )?
  { return new Expression(n0, n1); }
}

RelationalOperator RelationalOperator() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeChoice n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
}
{
  (
    (
      (
        LOOKAHEAD( 2 )
        n3 = < ASSIGN >
        { n2 = JTBToolkit.makeNodeToken(n3); }
        { n1 = new NodeChoice(n2, 0, 2); }
      |
        n5 = < EQ >
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n1 = new NodeChoice(n4, 1, 2); }
      )
      
    )
    { n0 = new NodeChoice(n1, 0, 5); }
  |
    n7 = < LT >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n0 = new NodeChoice(n6, 1, 5); }
  |
    n9 = < GT >
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n0 = new NodeChoice(n8, 2, 5); }
  |
    n11 = < GEQ >
    { n10 = JTBToolkit.makeNodeToken(n11); }
    { n0 = new NodeChoice(n10, 3, 5); }
  |
    n13 = < LEQ >
    { n12 = JTBToolkit.makeNodeToken(n13); }
    { n0 = new NodeChoice(n12, 4, 5); }
  )
  { return new RelationalOperator(n0); }
}

LogicalOperator LogicalOperator() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  (
    n2 = < AND >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n4 = < OR >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 3); }
  |
    n6 = < XOR >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 3); }
  )
  { return new LogicalOperator(n0); }
}

AdditiveExpression AdditiveExpression() :
{
  // --- JTB generated node declarations ---
  MultiplicativeExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  MultiplicativeExpression n8 = null;
}
{
  n0 = MultiplicativeExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = < PLUS >
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        n7 = < MINUS >
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 2); }
      )
      
    )
    { n2.addNode(n3); }
    n8 = MultiplicativeExpression()
    { n2.addNode(n8); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new AdditiveExpression(n0, n1); }
}

MultiplicativeExpression MultiplicativeExpression() :
{
  // --- JTB generated node declarations ---
  PowerExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  PowerExpression n8 = null;
}
{
  n0 = PowerExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = < TIMES >
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        n7 = < DIV >
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 2); }
      )
      
    )
    { n2.addNode(n3); }
    n8 = PowerExpression()
    { n2.addNode(n8); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new MultiplicativeExpression(n0, n1); }
}

PowerExpression PowerExpression() :
{
  // --- JTB generated node declarations ---
  UnaryExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  UnaryExpression n6 = null;
}
{
  n0 = UnaryExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      { n3 = new NodeSequence(1); }
      n5 = < CARET >
      { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      
    )
    { n2.addNode(n3); }
    n6 = UnaryExpression()
    { n2.addNode(n6); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new PowerExpression(n0, n1); }
}

UnaryExpression UnaryExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  UnaryExpression n7 = null;
  UnaryExpressionNotPlusMinus n8 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    (
      (
        n4 = < PLUS >
        { n3 = JTBToolkit.makeNodeToken(n4); }
        { n2 = new NodeChoice(n3, 0, 2); }
      |
        n6 = < MINUS >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n2 = new NodeChoice(n5, 1, 2); }
      )
      
    )
    { n1.addNode(n2); }
    n7 = UnaryExpression()
    { n1.addNode(n7); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n8 = UnaryExpressionNotPlusMinus()
    { n0 = new NodeChoice(n8, 1, 2); }
  )
  { return new UnaryExpression(n0); }
}

UnaryExpressionNotPlusMinus UnaryExpressionNotPlusMinus() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  UnaryExpression n4 = null;
  PrimaryExpression n5 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    n3 = < BANG >
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    n4 = UnaryExpression()
    { n1.addNode(n4); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n5 = PrimaryExpression()
    { n0 = new NodeChoice(n5, 1, 2); }
  )
  { return new UnaryExpressionNotPlusMinus(n0); }
}

PrimaryExpression PrimaryExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryPrefix n0 = null;
}
{
  n0 = PrimaryPrefix()
  { return new PrimaryExpression(n0); }
}

PrimaryPrefix PrimaryPrefix() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Literal n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  SpeciesReferenceOrFunctionCall n8 = null;
  MultistateSum n9 = null;
  IfExpression n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
}
{
  (
    n1 = Literal()
    { n0 = new NodeChoice(n1, 0, 9); }
  |
    { n2 = new NodeSequence(3); }
    n4 = < LPAREN >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = Expression()
    { n2.addNode(n5); }
    n7 = < RPAREN >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n2.addNode(n6); }
    { n0 = new NodeChoice(n2, 1, 9); }
  |
    n8 = SpeciesReferenceOrFunctionCall()
    { n0 = new NodeChoice(n8, 2, 9); }
  |
    n9 = MultistateSum()
    { n0 = new NodeChoice(n9, 3, 9); }
  |
    n10 = IfExpression()
    { n0 = new NodeChoice(n10, 4, 9); }
  |
    n12 = < CONST_MODEL_TIME >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n0 = new NodeChoice(n11, 5, 9); }
  |
    n14 = < CONST_AVOGADRO >
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n0 = new NodeChoice(n13, 6, 9); }
  |
    n16 = < CONST_QUANTITY_CONV_FACTOR >
    { n15 = JTBToolkit.makeNodeToken(n16); }
    { n0 = new NodeChoice(n15, 7, 9); }
  |
    n18 = < CONST_MODEL_TIME_INITIAL >
    { n17 = JTBToolkit.makeNodeToken(n18); }
    { n0 = new NodeChoice(n17, 8, 9); }
  )
  { return new PrimaryPrefix(n0); }
}

MultistateSum MultistateSum() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  ArgumentList_MultistateSum n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < SUM >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LPAREN >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = ArgumentList_MultistateSum()
  n6 = < RPAREN >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new MultistateSum(n0, n2, n4, n5); }
}

Name Name() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  PossibleExtensions n5 = null;
  PrimitiveType n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    n3 = < IDENTIFIER >
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    (
      LOOKAHEAD( 2 )
      n5 = PossibleExtensions()
      { n4.addNode(n5); }
    )?
    { n1.addNode(n4); }
    { n0 = new NodeChoice(n1, 0, 17); }
  |
    n6 = PrimitiveType()
    { n0 = new NodeChoice(n6, 1, 17); }
  |
    n8 = < PI >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n0 = new NodeChoice(n7, 2, 17); }
  |
    n10 = < TIME >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n0 = new NodeChoice(n9, 3, 17); }
  |
    n12 = < FLOOR >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n0 = new NodeChoice(n11, 4, 17); }
  |
    n14 = < DELAY >
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n0 = new NodeChoice(n13, 5, 17); }
  |
    n16 = < CEIL >
    { n15 = JTBToolkit.makeNodeToken(n16); }
    { n0 = new NodeChoice(n15, 6, 17); }
  |
    n18 = < TAN >
    { n17 = JTBToolkit.makeNodeToken(n18); }
    { n0 = new NodeChoice(n17, 7, 17); }
  |
    n20 = < TANH >
    { n19 = JTBToolkit.makeNodeToken(n20); }
    { n0 = new NodeChoice(n19, 8, 17); }
  |
    n22 = < COSH >
    { n21 = JTBToolkit.makeNodeToken(n22); }
    { n0 = new NodeChoice(n21, 9, 17); }
  |
    n24 = < LOG10 >
    { n23 = JTBToolkit.makeNodeToken(n24); }
    { n0 = new NodeChoice(n23, 10, 17); }
  |
    n26 = < ABS >
    { n25 = JTBToolkit.makeNodeToken(n26); }
    { n0 = new NodeChoice(n25, 11, 17); }
  |
    n28 = < COS >
    { n27 = JTBToolkit.makeNodeToken(n28); }
    { n0 = new NodeChoice(n27, 12, 17); }
  |
    n30 = < SIN >
    { n29 = JTBToolkit.makeNodeToken(n30); }
    { n0 = new NodeChoice(n29, 13, 17); }
  |
    n32 = < LOG >
    { n31 = JTBToolkit.makeNodeToken(n32); }
    { n0 = new NodeChoice(n31, 14, 17); }
  |
    n34 = < EXP >
    { n33 = JTBToolkit.makeNodeToken(n34); }
    { n0 = new NodeChoice(n33, 15, 17); }
  |
    n36 = < NAN >
    { n35 = JTBToolkit.makeNodeToken(n36); }
    { n0 = new NodeChoice(n35, 16, 17); }
  )
  { return new Name(n0); }
}

SpeciesReferenceOrFunctionCall_prefix SpeciesReferenceOrFunctionCall_prefix() :
{
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = null;
  ArgumentList n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n0 = Name()
  [
    { n5 = new NodeOptional(); }
    { n2 = new NodeSequence(3); }
    n4 = < LPAREN >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    [
      n6 = ArgumentList()
      { n5.addNode(n6); }
    ]
    { n2.addNode(n5); }
    n8 = < RPAREN >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n2.addNode(n7); }
    { n1.addNode(n2); }
  ]
  { return new SpeciesReferenceOrFunctionCall_prefix(n0, n1); }
}

SpeciesReferenceOrFunctionCall SpeciesReferenceOrFunctionCall() :
{
  // --- JTB generated node declarations ---
  SpeciesReferenceOrFunctionCall_prefix n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  PossibleExtensions n3 = null;
}
{
  n0 = SpeciesReferenceOrFunctionCall_prefix()
  (
    (
      { n2 = new NodeSequence(1); }
      n3 = PossibleExtensions()
      { n2.addNode(n3); }
      
    )
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new SpeciesReferenceOrFunctionCall(n0, n1); }
}

PossibleExtensions PossibleExtensions() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeListOptional n25 = new NodeListOptional();
  PossibleExtensions n26 = null;
}
{
  (
    (
      n2 = < EXTENSION_CONC >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 12); }
    |
      n4 = < EXTENSION_COMPARTMENT >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 12); }
    |
      n6 = < EXTENSION_PARTICLE >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 12); }
    |
      n8 = < EXTENSION_TRANS >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3, 12); }
    |
      n10 = < EXTENSION_INIT >
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4, 12); }
    |
      n12 = < EXTENSION_RATE >
      { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5, 12); }
    |
      n14 = < EXTENSION_SPECIES >
      { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6, 12); }
    |
      n16 = < EXTENSION_GLOBALQ >
      { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7, 12); }
    |
      n18 = < EXTENSION_FUNCTION >
      { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8, 12); }
    |
      n20 = < EXTENSION_REACTION >
      { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9, 12); }
    |
      n22 = < EXTENSION_FLUX >
      { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10, 12); }
    |
      n24 = < MY_SPECIAL_EXTENSION >
      { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11, 12); }
    )
    
  )
  (
    LOOKAHEAD( 2 )
    n26 = PossibleExtensions()
    { n25.addNode(n26); }
  )*
  { n25.nodes.trimToSize(); }
  { return new PossibleExtensions(n0, n25); }
}

Literal Literal() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  BooleanLiteral n5 = null;
}
{
  (
    n2 = < INTEGER_LITERAL >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n4 = < FLOATING_POINT_LITERAL >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 3); }
  |
    n5 = BooleanLiteral()
    { n0 = new NodeChoice(n5, 2, 3); }
  )
  { return new Literal(n0); }
}

BooleanLiteral BooleanLiteral() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  (
    n2 = < TRUE >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n4 = < FALSE >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new BooleanLiteral(n0); }
}

ArgumentList ArgumentList() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  AdditiveExpression n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  AdditiveExpression n7 = null;
  MultistateSites_list n8 = null;
}
{
  (
    LOOKAHEAD( 2 )
    { n1 = new NodeSequence(2); }
    n2 = AdditiveExpression()
    { n1.addNode(n2); }
    (
      { n4 = new NodeSequence(2); }
      n6 = < COMMA >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7 = AdditiveExpression()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
    )*
    { n3.nodes.trimToSize(); }
    { n1.addNode(n3); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n8 = MultistateSites_list()
    { n0 = new NodeChoice(n8, 1, 2); }
  )
  { return new ArgumentList(n0); }
}

ArgumentList_MultistateSum ArgumentList_MultistateSum() :
{
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeOptional n1 = new NodeOptional();
  ArgumentList_MultistateSum_Selectors n2 = null;
}
{
  n0 = Name()
  [
    n2 = ArgumentList_MultistateSum_Selectors()
    { n1.addNode(n2); }
  ]
  { return new ArgumentList_MultistateSum(n0, n1); }
}

ArgumentList_MultistateSum_Selectors ArgumentList_MultistateSum_Selectors() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Selector n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Selector n7 = null;
}
{
  n1 = < SEMICOLON >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Selector()
  (
    { n4 = new NodeSequence(2); }
    n6 = < SEMICOLON >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
    n7 = Selector()
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  { return new ArgumentList_MultistateSum_Selectors(n0, n2, n3); }
}

Selector Selector() :
{
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeChoice n2 = null;
  SiteSelector_postFix n3 = null;
  CoeffFunction_postFix n4 = null;
}
{
  n0 = Name()
  [
    (
      n3 = SiteSelector_postFix()
      { n2 = new NodeChoice(n3, 0, 2); }
    |
      n4 = CoeffFunction_postFix()
      { n2 = new NodeChoice(n4, 1, 2); }
    )
    { n1.addNode(n2); }
  ]
  { return new Selector(n0, n1); }
}

SiteSelector_postFix SiteSelector_postFix() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  Name n3 = null;
  Literal n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeChoice n6 = null;
  NodeList n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeChoice n11 = null;
  Name n12 = null;
  Literal n13 = null;
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeChoice n17 = null;
  Name n18 = null;
  Literal n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
}
{
  n1 = < LBRACE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      n3 = Name()
      { n2 = new NodeChoice(n3, 0, 2); }
    |
      n4 = Literal()
      { n2 = new NodeChoice(n4, 1, 2); }
    )
    
  )
  (
    { n7 = new NodeList(); }
    (
      (
        { n8 = new NodeSequence(2); }
        n10 = < COMMA >
        { n9 = JTBToolkit.makeNodeToken(n10); }
        { n8.addNode(n9); }
        (
          (
            n12 = Name()
            { n11 = new NodeChoice(n12, 0, 2); }
          |
            n13 = Literal()
            { n11 = new NodeChoice(n13, 1, 2); }
          )
          
        )
        { n8.addNode(n11); }
        { n7.addNode(n8); }
      )+
      { n7.nodes.trimToSize(); }
      { n6 = new NodeChoice(n7, 0, 2); }
    |
      (
        { n14 = new NodeSequence(2); }
        n16 = < COLON >
        { n15 = JTBToolkit.makeNodeToken(n16); }
        { n14.addNode(n15); }
        (
          (
            n18 = Name()
            { n17 = new NodeChoice(n18, 0, 2); }
          |
            n19 = Literal()
            { n17 = new NodeChoice(n19, 1, 2); }
          )
          
        )
        { n14.addNode(n17); }
        
      )
      { n6 = new NodeChoice(n14, 1, 2); }
    )
    { n5.addNode(n6); }
  )?
  n21 = < RBRACE >
  { n20 = JTBToolkit.makeNodeToken(n21); }
  { return new SiteSelector_postFix(n0, n2, n5, n20); }
}

CoeffFunction_postFix CoeffFunction_postFix() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  ArgumentList n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = < LPAREN >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n3 = ArgumentList()
    { n2.addNode(n3); }
  ]
  n5 = < RPAREN >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new CoeffFunction_postFix(n0, n2, n4); }
}

MultistateSite MultistateSite() :
{
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeChoice n3 = null;
  Name n4 = null;
  Literal n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n0 = Name()
  n2 = < LBRACE >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  (
    (
      n4 = Name()
      { n3 = new NodeChoice(n4, 0, 2); }
    |
      n5 = Literal()
      { n3 = new NodeChoice(n5, 1, 2); }
    )
    
  )
  n7 = < RBRACE >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new MultistateSite(n0, n1, n3, n6); }
}

MultistateSites_list MultistateSites_list() :
{
  // --- JTB generated node declarations ---
  MultistateSite n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  MultistateSite n5 = null;
}
{
  n0 = MultistateSite()
  (
    { n2 = new NodeSequence(2); }
    n4 = < SEMICOLON >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = MultistateSite()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new MultistateSites_list(n0, n1); }
}
