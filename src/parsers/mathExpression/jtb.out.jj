/* Generated by JTB 1.4.4 */


options
{
  JDK_VERSION = "1.5";
  STATIC = false;
  // JTB_JD = true;
  // JTB_F = true;
  // JTB_PRINTER = true;
  // JTB_P = "parsers.mathExpression";
  // JTB_W = false;
}

PARSER_BEGIN(MR_Expression_Parser)
package parsers.mathExpression;

import parsers.mathExpression.syntaxtree.*;
import parsers.mathExpression.visitor.*;
import java.io.*;
import parsers.mathExpression.syntaxtree.*;


public class MR_Expression_Parser {

  public static void main(String args[]) {
    try {
      String expression = new String("1*floor(Time/tau)");
      InputStream is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      MR_Expression_Parser react = new MR_Expression_Parser(is);
      CompleteExpression start = react.CompleteExpression();
      DepthFirstVoidVisitor v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      String expression2 = new String("asdf < sdf && (a < 3 && a > 4)");
      InputStream is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      MR_Expression_Parser react2 = new MR_Expression_Parser(is2);
      CompleteExpression start2 = react2.CompleteExpression();
      DepthFirstVoidVisitor v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("\"funaasdf \"(PAR v, PAR t)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      CompleteFunctionDeclaration start3 = react2.CompleteFunctionDeclaration();
      v2 = new MyVisitor();
      start3.accept(v2);
      System.out.println("...................................");
      expression2 = new String("k1*a^b");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("k1 * a^b");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("NaN");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("cdh1(p{1})");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
    }
    catch (Exception ex) {
      ex.printStackTrace();
    }
  }
}


class MyVisitor extends DepthFirstVoidVisitor {

  public void visit(NodeToken n) {
    System.out.println("visit " + MR_Expression_ParserConstants.tokenImage[n.kind] + "-->" + n.tokenImage);
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}

PARSER_END(MR_Expression_Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" ( ~["\n", "\r"] )* ( "\n"| "\r"| "\r\n" ) >
| < "/*" ( ~["*"] )* "*" ( ~["/"] ( ~["*"] )* "*" )* "/" >
}

TOKEN :
{
  < IF : "if" >
| < THEN : "then" >
| < ELSE : "else" >
| < FALSE : <FALSE_1>| <FALSE_2>| <FALSE_3> >
| < TRUE : <TRUE_1>| <TRUE_2>| <TRUE_3> >
| < #TRUE_1 : "true" >
| < #TRUE_2 : "True" >
| < #TRUE_3 : "TRUE" >
| < #FALSE_1 : "false" >
| < #FALSE_2 : "False" >
| < #FALSE_3 : "FALSE" >
| < TIME : "Time" >
| < TYPE_PAR : "PAR" >
| < TYPE_VAR : "VAR" >
| < TYPE_SUB : "SUB" >
| < TYPE_PROD : "PROD" >
| < TYPE_MOD : "MOD" >
| < TYPE_SITE : "SITE" >
| < TYPE_VOL : "VOL" >
| < EXTENSION_CONC : ".c" >
| < EXTENSION_PARTICLE : ".p" >
| < EXTENSION_TRANS : ".t" >
| < EXTENSION_INIT : ".i" >
| < EXTENSION_RATE : ".r" >
| < EXTENSION_SPECIES : ".sp" >
| < EXTENSION_GLOBALQ : ".gq" >
| < EXTENSION_COMPARTMENT : ".cmp" >
| < MY_SPECIAL_EXTENSION : ".*MY*SPECIAL*EXTENSION" >
| < SUM : "SUM" >
| < FLOOR : "floor" >
| < SQRT : "sqrt" >
| < EXP : "exp" >
| < LOG : "log" >
| < NAN : "NaN"| "Nan"| "nan"| "NAn"| "naN"| "nAn"| "nAN"| "NAN" >
| < CONST_AVOGADRO : "%NA%" >
| < CONST_QUANTITY_CONV_FACTOR : "%QFC%" >
| < CONST_MODEL_TIME : "%ModTime%" >
| < CONST_MODEL_TIME_INITIAL : "%ModTime.i%" >
}

TOKEN :
{
  < INTEGER_LITERAL : ( ["0"-"9"] )+ >
| < FLOATING_POINT_LITERAL : ( ["0"-"9"] )+ "." ( ["0"-"9"] )* ( <EXPONENT> )? ( ["f", "F", "d", "D"] )?| "." ( ["0"-"9"] )+ ( <EXPONENT> )? ( ["f", "F", "d", "D"] )?| ( ["0"-"9"] )+ <EXPONENT> ( ["f", "F", "d", "D"] )?| ( ["0"-"9"] )+ ( <EXPONENT> )? ["f", "F", "d", "D"] >
| < #EXPONENT : ["e", "E"] ( ["+", "-"] )? ( ["0"-"9"] )+ >
}

TOKEN :
{
  < IDENTIFIER : <STRING_LITERAL>| <LETTER> ( <LETTER>| <DIGIT> )* >
| < #LETTER : ["A"-"Z", "_", "a"-"z", "'"] >
| < #DIGIT : ["0"-"9"] >
| < #STRING_LITERAL : "\"" ( ( ~["\"", "\\", "\n", "\r"] )| ( "\\" ( ["n", "t", "b", "r", "f", "\\", "'", "\""]| ["0"-"7"] ( ["0"-"7"] )?| ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) )* "\"" >
}

TOKEN :
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < COLON : ":" >
| < DOT : "." >
}

TOKEN :
{
  < PLUS : "+" >
| < MINUS : "-" >
| < TIMES : "*" >
| < DIV : "/" >
| < ASSIGN : "=" >
| < GT : ">" >
| < LT : "<" >
| < BANG : "!" >
| < CARET : "^" >
| < PERC : "%" >
| < EQ : "==" >
| < LEQ : "<=" >
| < GEQ : ">=" >
| < NE : "!=" >
| < OR : "||" >
| < AND : "&&" >
}

/*****************************************
 * THE MULTIREMI EXPRESSION GRAMMAR STARTS HERE *
 *****************************************/
CompleteExpression CompleteExpression() :
{
  // --- JTB generated node declarations ---
  Expression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
}
{
  n0 = Expression()
  n2 = < EOF > {
    n2.beginColumn++;
    n2.endColumn++;
    { n1 = JTBToolkit.makeNodeToken(n2); }
  }
  { return new CompleteExpression(n0, n1); }
}

SingleFunctionCall SingleFunctionCall() :
{
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  ArgumentList n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n0 = Name()
  n2 = < LPAREN >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = ArgumentList()
  n5 = < RPAREN >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < EOF > {
    n7.beginColumn++;
    n7.endColumn++;
    { n6 = JTBToolkit.makeNodeToken(n7); }
  }
  { return new SingleFunctionCall(n0, n1, n3, n4, n6); }
}

CompleteFunctionDeclaration CompleteFunctionDeclaration() :
{
  // --- JTB generated node declarations ---
  FunctionDeclarator n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
}
{
  n0 = FunctionDeclarator()
  n2 = < EOF > {
    n2.beginColumn++;
    n2.endColumn++;
    { n1 = JTBToolkit.makeNodeToken(n2); }
  }
  { return new CompleteFunctionDeclaration(n0, n1); }
}

FunctionDeclarator FunctionDeclarator() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  FormalParameters n3 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    n3 = FormalParameters()
    { n2.addNode(n3); }
  )?
  { return new FunctionDeclarator(n0, n2); }
}

FormalParameters FormalParameters() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  FormalParameter n4 = null;
  NodeListOptional n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  FormalParameter n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
}
{
  n1 = "("
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    { n5 = new NodeListOptional(); }
    { n3 = new NodeSequence(2); }
    n4 = FormalParameter()
    { n3.addNode(n4); }
    (
      { n6 = new NodeSequence(2); }
      n8 = ","
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9 = FormalParameter()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
    )*
    { n5.nodes.trimToSize(); }
    { n3.addNode(n5); }
    { n2.addNode(n3); }
  ]
  n11 = ")"
  { n10 = JTBToolkit.makeNodeToken(n11); }
  { return new FormalParameters(n0, n2, n10); }
}

FormalParameter FormalParameter() :
{
  // --- JTB generated node declarations ---
  PrimitiveType n0 = null;
  VariableDeclaratorId n1 = null;
}
{
  n0 = PrimitiveType()
  n1 = VariableDeclaratorId()
  { return new FormalParameter(n0, n1); }
}

PrimitiveType PrimitiveType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
}
{
  (
    n2 = < TYPE_PAR >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 7); }
  |
    n4 = < TYPE_VAR >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 7); }
  |
    n6 = < TYPE_SUB >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 7); }
  |
    n8 = < TYPE_PROD >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n0 = new NodeChoice(n7, 3, 7); }
  |
    n10 = < TYPE_MOD >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n0 = new NodeChoice(n9, 4, 7); }
  |
    n12 = < TYPE_SITE >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n0 = new NodeChoice(n11, 5, 7); }
  |
    n14 = < TYPE_VOL >
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n0 = new NodeChoice(n13, 6, 7); }
  )
  { return new PrimitiveType(n0); }
}

VariableDeclaratorId VariableDeclaratorId() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new VariableDeclaratorId(n0); }
}

Expression Expression() :
{
  // --- JTB generated node declarations ---
  AdditiveExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  RelationalOperator n3 = null;
  Expression n4 = null;
  NodeListOptional n5 = null;
  NodeSequence n6 = null;
  LogicalOperator n7 = null;
  Expression n8 = null;
}
{
  n0 = AdditiveExpression()
  (
    { n5 = new NodeListOptional(); }
    { n2 = new NodeSequence(3); }
    n3 = RelationalOperator()
    { n2.addNode(n3); }
    n4 = Expression()
    { n2.addNode(n4); }
    (
      LOOKAHEAD( 2 )
      { n6 = new NodeSequence(2); }
      n7 = LogicalOperator()
      { n6.addNode(n7); }
      n8 = Expression()
      { n6.addNode(n8); }
      { n5.addNode(n6); }
    )*
    { n5.nodes.trimToSize(); }
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )?
  { return new Expression(n0, n1); }
}

RelationalOperator RelationalOperator() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeChoice n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
}
{
  (
    (
      (
        LOOKAHEAD( 2 )
        n3 = < ASSIGN >
        { n2 = JTBToolkit.makeNodeToken(n3); }
        { n1 = new NodeChoice(n2, 0, 2); }
      |
        n5 = < EQ >
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n1 = new NodeChoice(n4, 1, 2); }
      )
      
    )
    { n0 = new NodeChoice(n1, 0, 5); }
  |
    n7 = < LT >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n0 = new NodeChoice(n6, 1, 5); }
  |
    n9 = < GT >
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n0 = new NodeChoice(n8, 2, 5); }
  |
    n11 = < GEQ >
    { n10 = JTBToolkit.makeNodeToken(n11); }
    { n0 = new NodeChoice(n10, 3, 5); }
  |
    n13 = < LEQ >
    { n12 = JTBToolkit.makeNodeToken(n13); }
    { n0 = new NodeChoice(n12, 4, 5); }
  )
  { return new RelationalOperator(n0); }
}

LogicalOperator LogicalOperator() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  (
    n2 = < AND >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n4 = < OR >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new LogicalOperator(n0); }
}

AdditiveExpression AdditiveExpression() :
{
  // --- JTB generated node declarations ---
  MultiplicativeExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  MultiplicativeExpression n8 = null;
}
{
  n0 = MultiplicativeExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = < PLUS >
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        n7 = < MINUS >
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 2); }
      )
      
    )
    { n2.addNode(n3); }
    n8 = MultiplicativeExpression()
    { n2.addNode(n8); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new AdditiveExpression(n0, n1); }
}

MultiplicativeExpression MultiplicativeExpression() :
{
  // --- JTB generated node declarations ---
  PowerExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  PowerExpression n8 = null;
}
{
  n0 = PowerExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = < TIMES >
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        n7 = < DIV >
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 2); }
      )
      
    )
    { n2.addNode(n3); }
    n8 = PowerExpression()
    { n2.addNode(n8); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new MultiplicativeExpression(n0, n1); }
}

PowerExpression PowerExpression() :
{
  // --- JTB generated node declarations ---
  UnaryExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  UnaryExpression n6 = null;
}
{
  n0 = UnaryExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      { n3 = new NodeSequence(1); }
      n5 = < CARET >
      { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      
    )
    { n2.addNode(n3); }
    n6 = UnaryExpression()
    { n2.addNode(n6); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new PowerExpression(n0, n1); }
}

UnaryExpression UnaryExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  UnaryExpression n7 = null;
  UnaryExpressionNotPlusMinus n8 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    (
      (
        n4 = < PLUS >
        { n3 = JTBToolkit.makeNodeToken(n4); }
        { n2 = new NodeChoice(n3, 0, 2); }
      |
        n6 = < MINUS >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n2 = new NodeChoice(n5, 1, 2); }
      )
      
    )
    { n1.addNode(n2); }
    n7 = UnaryExpression()
    { n1.addNode(n7); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n8 = UnaryExpressionNotPlusMinus()
    { n0 = new NodeChoice(n8, 1, 2); }
  )
  { return new UnaryExpression(n0); }
}

UnaryExpressionNotPlusMinus UnaryExpressionNotPlusMinus() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  UnaryExpression n4 = null;
  PrimaryExpression n5 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    n3 = < BANG >
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    n4 = UnaryExpression()
    { n1.addNode(n4); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n5 = PrimaryExpression()
    { n0 = new NodeChoice(n5, 1, 2); }
  )
  { return new UnaryExpressionNotPlusMinus(n0); }
}

PrimaryExpression PrimaryExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryPrefix n0 = null;
}
{
  n0 = PrimaryPrefix()
  { return new PrimaryExpression(n0); }
}

PrimaryPrefix PrimaryPrefix() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Literal n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  SpeciesReferenceOrFunctionCall n8 = null;
  MultistateSum n9 = null;
}
{
  (
    n1 = Literal()
    { n0 = new NodeChoice(n1, 0, 4); }
  |
    { n2 = new NodeSequence(3); }
    n4 = < LPAREN >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = Expression()
    { n2.addNode(n5); }
    n7 = < RPAREN >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n2.addNode(n6); }
    { n0 = new NodeChoice(n2, 1, 4); }
  |
    n8 = SpeciesReferenceOrFunctionCall()
    { n0 = new NodeChoice(n8, 2, 4); }
  |
    n9 = MultistateSum()
    { n0 = new NodeChoice(n9, 3, 4); }
  )
  { return new PrimaryPrefix(n0); }
}

MultistateSum MultistateSum() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  ArgumentList n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < SUM >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LPAREN >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = ArgumentList()
  n6 = < RPAREN >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new MultistateSum(n0, n2, n4, n5); }
}

Name Name() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  PossibleExtensions n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    n3 = < IDENTIFIER >
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    (
      LOOKAHEAD( 2 )
      n5 = PossibleExtensions()
      { n4.addNode(n5); }
    )?
    { n1.addNode(n4); }
    { n0 = new NodeChoice(n1, 0, 6); }
  |
    n7 = < TIME >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n0 = new NodeChoice(n6, 1, 6); }
  |
    n9 = < FLOOR >
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n0 = new NodeChoice(n8, 2, 6); }
  |
    n11 = < LOG >
    { n10 = JTBToolkit.makeNodeToken(n11); }
    { n0 = new NodeChoice(n10, 3, 6); }
  |
    n13 = < EXP >
    { n12 = JTBToolkit.makeNodeToken(n13); }
    { n0 = new NodeChoice(n12, 4, 6); }
  |
    n15 = < NAN >
    { n14 = JTBToolkit.makeNodeToken(n15); }
    { n0 = new NodeChoice(n14, 5, 6); }
  )
  { return new Name(n0); }
}

SpeciesReferenceOrFunctionCall_prefix SpeciesReferenceOrFunctionCall_prefix() :
{
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = null;
  ArgumentList n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n0 = Name()
  [
    { n5 = new NodeOptional(); }
    { n2 = new NodeSequence(3); }
    n4 = < LPAREN >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    [
      n6 = ArgumentList()
      { n5.addNode(n6); }
    ]
    { n2.addNode(n5); }
    n8 = < RPAREN >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n2.addNode(n7); }
    { n1.addNode(n2); }
  ]
  { return new SpeciesReferenceOrFunctionCall_prefix(n0, n1); }
}

SpeciesReferenceOrFunctionCall SpeciesReferenceOrFunctionCall() :
{
  // --- JTB generated node declarations ---
  SpeciesReferenceOrFunctionCall_prefix n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  PossibleExtensions n3 = null;
}
{
  n0 = SpeciesReferenceOrFunctionCall_prefix()
  (
    (
      { n2 = new NodeSequence(1); }
      n3 = PossibleExtensions()
      { n2.addNode(n3); }
      
    )
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new SpeciesReferenceOrFunctionCall(n0, n1); }
}

PossibleExtensions PossibleExtensions() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeListOptional n19 = new NodeListOptional();
  PossibleExtensions n20 = null;
}
{
  (
    (
      n2 = < EXTENSION_CONC >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 9); }
    |
      n4 = < EXTENSION_COMPARTMENT >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 9); }
    |
      n6 = < EXTENSION_PARTICLE >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 9); }
    |
      n8 = < EXTENSION_TRANS >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3, 9); }
    |
      n10 = < EXTENSION_INIT >
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4, 9); }
    |
      n12 = < EXTENSION_RATE >
      { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5, 9); }
    |
      n14 = < EXTENSION_SPECIES >
      { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6, 9); }
    |
      n16 = < EXTENSION_GLOBALQ >
      { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7, 9); }
    |
      n18 = < MY_SPECIAL_EXTENSION >
      { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8, 9); }
    )
    
  )
  (
    LOOKAHEAD( 2 )
    n20 = PossibleExtensions()
    { n19.addNode(n20); }
  )*
  { n19.nodes.trimToSize(); }
  { return new PossibleExtensions(n0, n19); }
}

Literal Literal() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  BooleanLiteral n5 = null;
}
{
  (
    n2 = < INTEGER_LITERAL >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n4 = < FLOATING_POINT_LITERAL >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 3); }
  |
    n5 = BooleanLiteral()
    { n0 = new NodeChoice(n5, 2, 3); }
  )
  { return new Literal(n0); }
}

BooleanLiteral BooleanLiteral() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  (
    n2 = < TRUE >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n4 = < FALSE >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new BooleanLiteral(n0); }
}

ArgumentList ArgumentList() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  MultistateSites_list n1 = null;
  NodeSequence n2 = null;
  AdditiveExpression n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  AdditiveExpression n8 = null;
}
{
  (
    LOOKAHEAD( 2 )
    n1 = MultistateSites_list()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n2 = new NodeSequence(2); }
    n3 = AdditiveExpression()
    { n2.addNode(n3); }
    (
      { n5 = new NodeSequence(2); }
      n7 = < COMMA >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8 = AdditiveExpression()
      { n5.addNode(n8); }
      { n4.addNode(n5); }
    )*
    { n4.nodes.trimToSize(); }
    { n2.addNode(n4); }
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new ArgumentList(n0); }
}

MultistateSite MultistateSite() :
{
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeChoice n3 = null;
  Name n4 = null;
  Literal n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n0 = Name()
  n2 = < LBRACE >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  (
    (
      n4 = Name()
      { n3 = new NodeChoice(n4, 0, 2); }
    |
      n5 = Literal()
      { n3 = new NodeChoice(n5, 1, 2); }
    )
    
  )
  n7 = < RBRACE >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new MultistateSite(n0, n1, n3, n6); }
}

MultistateSites_list MultistateSites_list() :
{
  // --- JTB generated node declarations ---
  MultistateSite n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  MultistateSite n5 = null;
}
{
  n0 = MultistateSite()
  (
    { n2 = new NodeSequence(2); }
    n4 = < SEMICOLON >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = MultistateSite()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new MultistateSites_list(n0, n1); }
}
