/* Generated by JTB 1.4.4 */
package parsers.mathExpression.visitor;

import parsers.mathExpression.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first order.<br>
 * In your "VoidArgu" visitors extend this class and override part or all of these methods.
 *
 * @param <A> The user argument type
 */
public class DepthFirstVoidArguVisitor<A> implements IVoidArguVisitor<A> {


  /*
   * Base nodes classes visit methods (to be overridden if necessary)
   */

  /**
   * Visits a {@link NodeChoice} node, passing it an argument.
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final NodeChoice n, final A argu) {
    n.choice.accept(this, argu);
    return;
  }

  /**
   * Visits a {@link NodeList} node, passing it an argument.
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final NodeList n, final A argu) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this, argu);
    }
    return;
  }

  /**
   * Visits a {@link NodeListOptional} node, passing it an argument.
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final NodeListOptional n, final A argu) {
    if (n.present()) {
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        e.next().accept(this, argu);
        }
      return;
    } else
      return;
  }

  /**
   * Visits a {@link NodeOptional} node, passing it an argument.
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final NodeOptional n, final A argu) {
    if (n.present()) {
      n.node.accept(this, argu);
      return;
    } else
    return;
  }

  /**
   * Visits a {@link NodeSequence} node, passing it an argument.
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final NodeSequence n, final A argu) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this, argu);
    }
    return;
  }

  /**
   * Visits a {@link NodeToken} node, passing it an argument.
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final NodeToken n, @SuppressWarnings("unused") final A argu) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  /*
   * User grammar generated visit methods (to be overridden if necessary)
   */

  /**
   * Visits a {@link CompleteExpression} node, whose children are the following :
   * <p>
   * expression -> Expression()<br>
   * nodeToken -> < EOF ><br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final CompleteExpression n, final A argu) {
    // expression -> Expression()
    n.expression.accept(this, argu);
    // nodeToken -> < EOF >
    n.nodeToken.accept(this, argu);
  }

  /**
   * Visits a {@link SingleFunctionCall} node, whose children are the following :
   * <p>
   * name -> Name()<br>
   * nodeToken -> < LPAREN ><br>
   * nodeOptional -> ( ArgumentList() )?<br>
   * nodeToken1 -> < RPAREN ><br>
   * nodeToken2 -> < EOF ><br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final SingleFunctionCall n, final A argu) {
    // name -> Name()
    n.name.accept(this, argu);
    // nodeToken -> < LPAREN >
    n.nodeToken.accept(this, argu);
    // nodeOptional -> ( ArgumentList() )?
    n.nodeOptional.accept(this, argu);
    // nodeToken1 -> < RPAREN >
    n.nodeToken1.accept(this, argu);
    // nodeToken2 -> < EOF >
    n.nodeToken2.accept(this, argu);
  }

  /**
   * Visits a {@link CompleteFunctionDeclaration} node, whose children are the following :
   * <p>
   * functionDeclarator -> FunctionDeclarator()<br>
   * nodeToken -> < EOF ><br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final CompleteFunctionDeclaration n, final A argu) {
    // functionDeclarator -> FunctionDeclarator()
    n.functionDeclarator.accept(this, argu);
    // nodeToken -> < EOF >
    n.nodeToken.accept(this, argu);
  }

  /**
   * Visits a {@link FunctionDeclarator} node, whose children are the following :
   * <p>
   * nodeToken -> < IDENTIFIER ><br>
   * nodeOptional -> ( FormalParameters() )?<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final FunctionDeclarator n, final A argu) {
    // nodeToken -> < IDENTIFIER >
    n.nodeToken.accept(this, argu);
    // nodeOptional -> ( FormalParameters() )?
    n.nodeOptional.accept(this, argu);
  }

  /**
   * Visits a {@link FormalParameters} node, whose children are the following :
   * <p>
   * nodeToken -> "("<br>
   * nodeOptional -> [ #0 FormalParameter()<br>
   * ............ .. . #1 ( $0 "," $1 FormalParameter() )* ]<br>
   * nodeToken1 -> ")"<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final FormalParameters n, final A argu) {
    // nodeToken -> "("
    n.nodeToken.accept(this, argu);
    // nodeOptional -> [ #0 FormalParameter()
    // ............ .. . #1 ( $0 "," $1 FormalParameter() )* ]
    n.nodeOptional.accept(this, argu);
    // nodeToken1 -> ")"
    n.nodeToken1.accept(this, argu);
  }

  /**
   * Visits a {@link FormalParameter} node, whose children are the following :
   * <p>
   * primitiveType -> PrimitiveType()<br>
   * variableDeclaratorId -> VariableDeclaratorId()<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final FormalParameter n, final A argu) {
    // primitiveType -> PrimitiveType()
    n.primitiveType.accept(this, argu);
    // variableDeclaratorId -> VariableDeclaratorId()
    n.variableDeclaratorId.accept(this, argu);
  }

  /**
   * Visits a {@link PrimitiveType} node, whose children are the following :
   * <p>
   * nodeChoice -> . %0 < TYPE_PAR ><br>
   * .......... .. | %1 < TYPE_VAR ><br>
   * .......... .. | %2 < TYPE_SUB ><br>
   * .......... .. | %3 < TYPE_PROD ><br>
   * .......... .. | %4 < TYPE_MOD ><br>
   * .......... .. | %5 < TYPE_SITE ><br>
   * .......... .. | %6 < TYPE_VOL ><br>
   * .......... .. | %7 < TYPE_TIME ><br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final PrimitiveType n, final A argu) {
    // nodeChoice -> . %0 < TYPE_PAR >
    // .......... .. | %1 < TYPE_VAR >
    // .......... .. | %2 < TYPE_SUB >
    // .......... .. | %3 < TYPE_PROD >
    // .......... .. | %4 < TYPE_MOD >
    // .......... .. | %5 < TYPE_SITE >
    // .......... .. | %6 < TYPE_VOL >
    // .......... .. | %7 < TYPE_TIME >
    n.nodeChoice.accept(this, argu);
  }

  /**
   * Visits a {@link VariableDeclaratorId} node, whose children are the following :
   * <p>
   * nodeToken -> < IDENTIFIER ><br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final VariableDeclaratorId n, final A argu) {
    // nodeToken -> < IDENTIFIER >
    n.nodeToken.accept(this, argu);
  }

  /**
   * Visits a {@link IfExpression} node, whose children are the following :
   * <p>
   * nodeToken -> < IF ><br>
   * nodeToken1 -> < LPAREN ><br>
   * expression -> Expression()<br>
   * nodeToken2 -> < COMMA ><br>
   * expression1 -> Expression()<br>
   * nodeOptional -> ( #0 < COMMA > #1 Expression() )?<br>
   * nodeToken3 -> < RPAREN ><br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final IfExpression n, final A argu) {
    // nodeToken -> < IF >
    n.nodeToken.accept(this, argu);
    // nodeToken1 -> < LPAREN >
    n.nodeToken1.accept(this, argu);
    // expression -> Expression()
    n.expression.accept(this, argu);
    // nodeToken2 -> < COMMA >
    n.nodeToken2.accept(this, argu);
    // expression1 -> Expression()
    n.expression1.accept(this, argu);
    // nodeOptional -> ( #0 < COMMA > #1 Expression() )?
    n.nodeOptional.accept(this, argu);
    // nodeToken3 -> < RPAREN >
    n.nodeToken3.accept(this, argu);
  }

  /**
   * Visits a {@link Expression} node, whose children are the following :
   * <p>
   * additiveExpression -> AdditiveExpression()<br>
   * nodeOptional -> ( #0 RelationalOperator() #1 Expression()<br>
   * ............ .. . #2 ( $0 LogicalOperator() $1 Expression() )* )?<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final Expression n, final A argu) {
    // additiveExpression -> AdditiveExpression()
    n.additiveExpression.accept(this, argu);
    // nodeOptional -> ( #0 RelationalOperator() #1 Expression()
    // ............ .. . #2 ( $0 LogicalOperator() $1 Expression() )* )?
    n.nodeOptional.accept(this, argu);
  }

  /**
   * Visits a {@link RelationalOperator} node, whose children are the following :
   * <p>
   * nodeChoice -> . %0 ( &0 < ASSIGN ><br>
   * .......... .. . .. | &1 < EQ > )<br>
   * .......... .. | %1 < LT ><br>
   * .......... .. | %2 < GT ><br>
   * .......... .. | %3 < GEQ ><br>
   * .......... .. | %4 < LEQ ><br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final RelationalOperator n, final A argu) {
    // nodeChoice -> . %0 ( &0 < ASSIGN >
    // .......... .. . .. | &1 < EQ > )
    // .......... .. | %1 < LT >
    // .......... .. | %2 < GT >
    // .......... .. | %3 < GEQ >
    // .......... .. | %4 < LEQ >
    n.nodeChoice.accept(this, argu);
  }

  /**
   * Visits a {@link LogicalOperator} node, whose children are the following :
   * <p>
   * nodeChoice -> . %0 < AND ><br>
   * .......... .. | %1 < OR ><br>
   * .......... .. | %2 < XOR ><br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final LogicalOperator n, final A argu) {
    // nodeChoice -> . %0 < AND >
    // .......... .. | %1 < OR >
    // .......... .. | %2 < XOR >
    n.nodeChoice.accept(this, argu);
  }

  /**
   * Visits a {@link AdditiveExpression} node, whose children are the following :
   * <p>
   * multiplicativeExpression -> MultiplicativeExpression()<br>
   * nodeListOptional -> ( #0 ( %0 < PLUS ><br>
   * ................ .. . .. | %1 < MINUS > ) #1 MultiplicativeExpression() )*<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final AdditiveExpression n, final A argu) {
    // multiplicativeExpression -> MultiplicativeExpression()
    n.multiplicativeExpression.accept(this, argu);
    // nodeListOptional -> ( #0 ( %0 < PLUS >
    // ................ .. . .. | %1 < MINUS > ) #1 MultiplicativeExpression() )*
    n.nodeListOptional.accept(this, argu);
  }

  /**
   * Visits a {@link MultiplicativeExpression} node, whose children are the following :
   * <p>
   * powerExpression -> PowerExpression()<br>
   * nodeListOptional -> ( #0 ( %0 < TIMES ><br>
   * ................ .. . .. | %1 < DIV > ) #1 PowerExpression() )*<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final MultiplicativeExpression n, final A argu) {
    // powerExpression -> PowerExpression()
    n.powerExpression.accept(this, argu);
    // nodeListOptional -> ( #0 ( %0 < TIMES >
    // ................ .. . .. | %1 < DIV > ) #1 PowerExpression() )*
    n.nodeListOptional.accept(this, argu);
  }

  /**
   * Visits a {@link PowerExpression} node, whose children are the following :
   * <p>
   * unaryExpression -> UnaryExpression()<br>
   * nodeListOptional -> ( #0 ( < CARET > ) #1 UnaryExpression() )*<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final PowerExpression n, final A argu) {
    // unaryExpression -> UnaryExpression()
    n.unaryExpression.accept(this, argu);
    // nodeListOptional -> ( #0 ( < CARET > ) #1 UnaryExpression() )*
    n.nodeListOptional.accept(this, argu);
  }

  /**
   * Visits a {@link UnaryExpression} node, whose children are the following :
   * <p>
   * nodeChoice -> . %0 #0 ( &0 < PLUS ><br>
   * .......... .. . .. .. | &1 < MINUS > ) #1 UnaryExpression()<br>
   * .......... .. | %1 UnaryExpressionNotPlusMinus()<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final UnaryExpression n, final A argu) {
    // nodeChoice -> . %0 #0 ( &0 < PLUS >
    // .......... .. . .. .. | &1 < MINUS > ) #1 UnaryExpression()
    // .......... .. | %1 UnaryExpressionNotPlusMinus()
    n.nodeChoice.accept(this, argu);
  }

  /**
   * Visits a {@link UnaryExpressionNotPlusMinus} node, whose children are the following :
   * <p>
   * nodeChoice -> . %0 #0 < BANG > #1 UnaryExpression()<br>
   * .......... .. | %1 PrimaryExpression()<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final UnaryExpressionNotPlusMinus n, final A argu) {
    // nodeChoice -> . %0 #0 < BANG > #1 UnaryExpression()
    // .......... .. | %1 PrimaryExpression()
    n.nodeChoice.accept(this, argu);
  }

  /**
   * Visits a {@link PrimaryExpression} node, whose children are the following :
   * <p>
   * primaryPrefix -> PrimaryPrefix()<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final PrimaryExpression n, final A argu) {
    // primaryPrefix -> PrimaryPrefix()
    n.primaryPrefix.accept(this, argu);
  }

  /**
   * Visits a {@link PrimaryPrefix} node, whose children are the following :
   * <p>
   * nodeChoice -> . %0 Literal()<br>
   * .......... .. | %1 #0 < LPAREN > #1 Expression() #2 < RPAREN ><br>
   * .......... .. | %2 SpeciesReferenceOrFunctionCall()<br>
   * .......... .. | %3 MultistateSum()<br>
   * .......... .. | %4 IfExpression()<br>
   * .......... .. | %5 < CONST_MODEL_TIME ><br>
   * .......... .. | %6 < CONST_AVOGADRO ><br>
   * .......... .. | %7 < CONST_QUANTITY_CONV_FACTOR ><br>
   * .......... .. | %8 < CONST_MODEL_TIME_INITIAL ><br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final PrimaryPrefix n, final A argu) {
    // nodeChoice -> . %0 Literal()
    // .......... .. | %1 #0 < LPAREN > #1 Expression() #2 < RPAREN >
    // .......... .. | %2 SpeciesReferenceOrFunctionCall()
    // .......... .. | %3 MultistateSum()
    // .......... .. | %4 IfExpression()
    // .......... .. | %5 < CONST_MODEL_TIME >
    // .......... .. | %6 < CONST_AVOGADRO >
    // .......... .. | %7 < CONST_QUANTITY_CONV_FACTOR >
    // .......... .. | %8 < CONST_MODEL_TIME_INITIAL >
    n.nodeChoice.accept(this, argu);
  }

  /**
   * Visits a {@link MultistateSum} node, whose children are the following :
   * <p>
   * nodeToken -> < SUM ><br>
   * nodeToken1 -> < LPAREN ><br>
   * argumentList_MultistateSum -> ArgumentList_MultistateSum()<br>
   * nodeToken2 -> < RPAREN ><br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final MultistateSum n, final A argu) {
    // nodeToken -> < SUM >
    n.nodeToken.accept(this, argu);
    // nodeToken1 -> < LPAREN >
    n.nodeToken1.accept(this, argu);
    // argumentList_MultistateSum -> ArgumentList_MultistateSum()
    n.argumentList_MultistateSum.accept(this, argu);
    // nodeToken2 -> < RPAREN >
    n.nodeToken2.accept(this, argu);
  }

  /**
   * Visits a {@link Name} node, whose children are the following :
   * <p>
   * nodeChoice -> . %00 #0 < IDENTIFIER ><br>
   * .......... .. . ... #1 ( PossibleExtensions() )?<br>
   * .......... .. | %01 PrimitiveType()<br>
   * .......... .. | %02 < PI ><br>
   * .......... .. | %03 < TIME ><br>
   * .......... .. | %04 < FLOOR ><br>
   * .......... .. | %05 < DELAY ><br>
   * .......... .. | %06 < CEIL ><br>
   * .......... .. | %07 < TAN ><br>
   * .......... .. | %08 < TANH ><br>
   * .......... .. | %09 < COSH ><br>
   * .......... .. | %10 < LOG10 ><br>
   * .......... .. | %11 < ABS ><br>
   * .......... .. | %12 < COS ><br>
   * .......... .. | %13 < SIN ><br>
   * .......... .. | %14 < LOG ><br>
   * .......... .. | %15 < EXP ><br>
   * .......... .. | %16 < NAN ><br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final Name n, final A argu) {
    // nodeChoice -> . %00 #0 < IDENTIFIER >
    // .......... .. . ... #1 ( PossibleExtensions() )?
    // .......... .. | %01 PrimitiveType()
    // .......... .. | %02 < PI >
    // .......... .. | %03 < TIME >
    // .......... .. | %04 < FLOOR >
    // .......... .. | %05 < DELAY >
    // .......... .. | %06 < CEIL >
    // .......... .. | %07 < TAN >
    // .......... .. | %08 < TANH >
    // .......... .. | %09 < COSH >
    // .......... .. | %10 < LOG10 >
    // .......... .. | %11 < ABS >
    // .......... .. | %12 < COS >
    // .......... .. | %13 < SIN >
    // .......... .. | %14 < LOG >
    // .......... .. | %15 < EXP >
    // .......... .. | %16 < NAN >
    n.nodeChoice.accept(this, argu);
  }

  /**
   * Visits a {@link SpeciesReferenceOrFunctionCall_prefix} node, whose children are the following :
   * <p>
   * name -> Name()<br>
   * nodeOptional -> [ #0 < LPAREN ><br>
   * ............ .. . #1 [ ArgumentList() ] #2 < RPAREN > ]<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final SpeciesReferenceOrFunctionCall_prefix n, final A argu) {
    // name -> Name()
    n.name.accept(this, argu);
    // nodeOptional -> [ #0 < LPAREN >
    // ............ .. . #1 [ ArgumentList() ] #2 < RPAREN > ]
    n.nodeOptional.accept(this, argu);
  }

  /**
   * Visits a {@link SpeciesReferenceOrFunctionCall} node, whose children are the following :
   * <p>
   * speciesReferenceOrFunctionCall_prefix -> SpeciesReferenceOrFunctionCall_prefix()<br>
   * nodeListOptional -> ( ( PossibleExtensions() ) )*<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final SpeciesReferenceOrFunctionCall n, final A argu) {
    // speciesReferenceOrFunctionCall_prefix -> SpeciesReferenceOrFunctionCall_prefix()
    n.speciesReferenceOrFunctionCall_prefix.accept(this, argu);
    // nodeListOptional -> ( ( PossibleExtensions() ) )*
    n.nodeListOptional.accept(this, argu);
  }

  /**
   * Visits a {@link PossibleExtensions} node, whose children are the following :
   * <p>
   * nodeChoice -> ( %00 < EXTENSION_CONC ><br>
   * .......... .. | %01 < EXTENSION_COMPARTMENT ><br>
   * .......... .. | %02 < EXTENSION_PARTICLE ><br>
   * .......... .. | %03 < EXTENSION_TRANS ><br>
   * .......... .. | %04 < EXTENSION_INIT ><br>
   * .......... .. | %05 < EXTENSION_RATE ><br>
   * .......... .. | %06 < EXTENSION_SPECIES ><br>
   * .......... .. | %07 < EXTENSION_GLOBALQ ><br>
   * .......... .. | %08 < EXTENSION_FUNCTION ><br>
   * .......... .. | %09 < EXTENSION_REACTION ><br>
   * .......... .. | %10 < EXTENSION_FLUX ><br>
   * .......... .. | %11 < MY_SPECIAL_EXTENSION > )<br>
   * nodeListOptional -> ( PossibleExtensions() )*<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final PossibleExtensions n, final A argu) {
    // nodeChoice -> ( %00 < EXTENSION_CONC >
    // .......... .. | %01 < EXTENSION_COMPARTMENT >
    // .......... .. | %02 < EXTENSION_PARTICLE >
    // .......... .. | %03 < EXTENSION_TRANS >
    // .......... .. | %04 < EXTENSION_INIT >
    // .......... .. | %05 < EXTENSION_RATE >
    // .......... .. | %06 < EXTENSION_SPECIES >
    // .......... .. | %07 < EXTENSION_GLOBALQ >
    // .......... .. | %08 < EXTENSION_FUNCTION >
    // .......... .. | %09 < EXTENSION_REACTION >
    // .......... .. | %10 < EXTENSION_FLUX >
    // .......... .. | %11 < MY_SPECIAL_EXTENSION > )
    n.nodeChoice.accept(this, argu);
    // nodeListOptional -> ( PossibleExtensions() )*
    n.nodeListOptional.accept(this, argu);
  }

  /**
   * Visits a {@link Literal} node, whose children are the following :
   * <p>
   * nodeChoice -> . %0 < INTEGER_LITERAL ><br>
   * .......... .. | %1 < FLOATING_POINT_LITERAL ><br>
   * .......... .. | %2 BooleanLiteral()<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final Literal n, final A argu) {
    // nodeChoice -> . %0 < INTEGER_LITERAL >
    // .......... .. | %1 < FLOATING_POINT_LITERAL >
    // .......... .. | %2 BooleanLiteral()
    n.nodeChoice.accept(this, argu);
  }

  /**
   * Visits a {@link BooleanLiteral} node, whose children are the following :
   * <p>
   * nodeChoice -> . %0 < TRUE ><br>
   * .......... .. | %1 < FALSE ><br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final BooleanLiteral n, final A argu) {
    // nodeChoice -> . %0 < TRUE >
    // .......... .. | %1 < FALSE >
    n.nodeChoice.accept(this, argu);
  }

  /**
   * Visits a {@link ArgumentList} node, whose children are the following :
   * <p>
   * nodeChoice -> . %0 #0 AdditiveExpression()<br>
   * .......... .. . .. #1 ( $0 < COMMA > $1 AdditiveExpression() )*<br>
   * .......... .. | %1 MultistateSites_list()<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final ArgumentList n, final A argu) {
    // nodeChoice -> . %0 #0 AdditiveExpression()
    // .......... .. . .. #1 ( $0 < COMMA > $1 AdditiveExpression() )*
    // .......... .. | %1 MultistateSites_list()
    n.nodeChoice.accept(this, argu);
  }

  /**
   * Visits a {@link ArgumentList_MultistateSum} node, whose children are the following :
   * <p>
   * name -> Name()<br>
   * nodeOptional -> [ ArgumentList_MultistateSum_Selectors() ]<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final ArgumentList_MultistateSum n, final A argu) {
    // name -> Name()
    n.name.accept(this, argu);
    // nodeOptional -> [ ArgumentList_MultistateSum_Selectors() ]
    n.nodeOptional.accept(this, argu);
  }

  /**
   * Visits a {@link ArgumentList_MultistateSum_Selectors} node, whose children are the following :
   * <p>
   * nodeToken -> < SEMICOLON ><br>
   * selector -> Selector()<br>
   * nodeListOptional -> ( #0 < SEMICOLON > #1 Selector() )*<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final ArgumentList_MultistateSum_Selectors n, final A argu) {
    // nodeToken -> < SEMICOLON >
    n.nodeToken.accept(this, argu);
    // selector -> Selector()
    n.selector.accept(this, argu);
    // nodeListOptional -> ( #0 < SEMICOLON > #1 Selector() )*
    n.nodeListOptional.accept(this, argu);
  }

  /**
   * Visits a {@link Selector} node, whose children are the following :
   * <p>
   * name -> Name()<br>
   * nodeOptional -> [ %0 SiteSelector_postFix()<br>
   * ............ .. | %1 CoeffFunction_postFix() ]<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final Selector n, final A argu) {
    // name -> Name()
    n.name.accept(this, argu);
    // nodeOptional -> [ %0 SiteSelector_postFix()
    // ............ .. | %1 CoeffFunction_postFix() ]
    n.nodeOptional.accept(this, argu);
  }

  /**
   * Visits a {@link SiteSelector_postFix} node, whose children are the following :
   * <p>
   * nodeToken -> < LBRACE ><br>
   * nodeChoice -> ( %0 Name()<br>
   * .......... .. | %1 Literal() )<br>
   * nodeOptional -> ( %0 ( #0 < COMMA ><br>
   * ............ .. . #1 ( &0 Name()<br>
   * ............ .. . .. | &1 Literal() ) )+<br>
   * ............ .. | %1 ( #0 < COLON ><br>
   * ............ .. . .. . #1 ( &0 Name()<br>
   * ............ .. . .. . .. | &1 Literal() ) ) )?<br>
   * nodeToken1 -> < RBRACE ><br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final SiteSelector_postFix n, final A argu) {
    // nodeToken -> < LBRACE >
    n.nodeToken.accept(this, argu);
    // nodeChoice -> ( %0 Name()
    // .......... .. | %1 Literal() )
    n.nodeChoice.accept(this, argu);
    // nodeOptional -> ( %0 ( #0 < COMMA >
    // ............ .. . #1 ( &0 Name()
    // ............ .. . .. | &1 Literal() ) )+
    // ............ .. | %1 ( #0 < COLON >
    // ............ .. . .. . #1 ( &0 Name()
    // ............ .. . .. . .. | &1 Literal() ) ) )?
    n.nodeOptional.accept(this, argu);
    // nodeToken1 -> < RBRACE >
    n.nodeToken1.accept(this, argu);
  }

  /**
   * Visits a {@link CoeffFunction_postFix} node, whose children are the following :
   * <p>
   * nodeToken -> < LPAREN ><br>
   * nodeOptional -> [ ArgumentList() ]<br>
   * nodeToken1 -> < RPAREN ><br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final CoeffFunction_postFix n, final A argu) {
    // nodeToken -> < LPAREN >
    n.nodeToken.accept(this, argu);
    // nodeOptional -> [ ArgumentList() ]
    n.nodeOptional.accept(this, argu);
    // nodeToken1 -> < RPAREN >
    n.nodeToken1.accept(this, argu);
  }

  /**
   * Visits a {@link MultistateSite} node, whose children are the following :
   * <p>
   * name -> Name()<br>
   * nodeToken -> < LBRACE ><br>
   * nodeChoice -> ( %0 Name()<br>
   * .......... .. | %1 Literal() )<br>
   * nodeToken1 -> < RBRACE ><br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final MultistateSite n, final A argu) {
    // name -> Name()
    n.name.accept(this, argu);
    // nodeToken -> < LBRACE >
    n.nodeToken.accept(this, argu);
    // nodeChoice -> ( %0 Name()
    // .......... .. | %1 Literal() )
    n.nodeChoice.accept(this, argu);
    // nodeToken1 -> < RBRACE >
    n.nodeToken1.accept(this, argu);
  }

  /**
   * Visits a {@link MultistateSites_list} node, whose children are the following :
   * <p>
   * multistateSite -> MultistateSite()<br>
   * nodeListOptional -> ( #0 < SEMICOLON > #1 MultistateSite() )*<br>
   *
   * @param n the node to visit
   * @param argu the user argument
   */
  public void visit(final MultistateSites_list n, final A argu) {
    // multistateSite -> MultistateSite()
    n.multistateSite.accept(this, argu);
    // nodeListOptional -> ( #0 < SEMICOLON > #1 MultistateSite() )*
    n.nodeListOptional.accept(this, argu);
  }

}
