/* Generated By:JavaCC: Do not edit this line. MR_Expression_ParserTokenManager.java */
package parsers.mathExpression;
import parsers.mathExpression.syntaxtree.*;
import parsers.mathExpression.visitor.*;
import java.io.*;
import parsers.mathExpression.syntaxtree.*;

/** Token Manager. */
public class MR_Expression_ParserTokenManager implements MR_Expression_ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000007fc000000L) != 0L)
            return 10;
         if ((active0 & 0xe803f80280L) != 0L)
         {
            jjmatchedKind = 48;
            return 25;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 48;
            return 40;
         }
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 48;
            return 7;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 48;
            return 3;
         }
         if ((active1 & 0x2L) != 0L)
            return 53;
         return -1;
      case 1:
         if ((active0 & 0x80L) != 0L)
            return 25;
         if ((active0 & 0xf803fc0300L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 48;
               jjmatchedPos = 1;
            }
            return 25;
         }
         return -1;
      case 2:
         if ((active0 & 0x3001440300L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
            return 25;
         }
         if ((active0 & 0xc802b80000L) != 0L)
            return 25;
         return -1;
      case 3:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
            return 25;
         }
         if ((active0 & 0x2001440300L) != 0L)
            return 25;
         return -1;
      case 4:
         if ((active0 & 0x1000000000L) != 0L)
            return 25;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case 37:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x1e0000000000L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 40:
         return jjStopAtPos(0, 52);
      case 41:
         return jjStopAtPos(0, 53);
      case 42:
         return jjStopAtPos(0, 64);
      case 43:
         return jjStopAtPos(0, 62);
      case 44:
         return jjStopAtPos(0, 59);
      case 45:
         return jjStopAtPos(0, 63);
      case 46:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x7fc000000L, 0x0L);
      case 47:
         return jjStartNfaWithStates_0(0, 65, 53);
      case 58:
         return jjStopAtPos(0, 60);
      case 59:
         return jjStopAtPos(0, 58);
      case 60:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 61:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 62:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x480000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x801200000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x2100000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 56);
      case 93:
         return jjStopAtPos(0, 57);
      case 94:
         return jjStopAtPos(0, 70);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4000000200L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 123:
         return jjStopAtPos(0, 54);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
      case 125:
         return jjStopAtPos(0, 55);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 42:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 61:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x2800000L, active1, 0L);
      case 81:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x800200000L, active1, 0L);
      case 99:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 102:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 7, 25);
         break;
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 105:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000200L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 112:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         break;
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 124:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 66:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 25);
         break;
      case 68:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 25);
         break;
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 76:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 25);
         break;
      case 77:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 25);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 82:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 25);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 25);
         break;
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 103:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 25);
         break;
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200040000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x181000000000L);
      case 112:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 31);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 25);
         break;
      case 113:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 32);
         break;
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(3, 41);
         break;
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 68:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 25);
         break;
      case 69:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 25);
         break;
      case 89:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000000000L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 25);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 25);
         break;
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 25);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 112:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 33);
         break;
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(4, 42);
         break;
      case 42:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000000L);
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x180000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x180000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(8, 43);
         break;
      case 46:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(10, 44);
         break;
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 88:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa21_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(21, 34);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 80;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 25:
                  if ((0x3ff008000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(25);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAddStates(0, 7);
                  }
                  else if (curChar == 47)
                     jjAddStates(8, 9);
                  else if (curChar == 39)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(25);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 46)
                     jjCheckNAdd(10);
                  break;
               case 53:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(59, 60);
                  else if (curChar == 47)
                     jjCheckNAddStates(13, 15);
                  break;
               case 40:
                  if ((0x3ff008000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(25);
                  break;
               case 7:
                  if ((0x3ff008000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(25);
                  break;
               case 9:
                  if (curChar == 46)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(16, 18);
                  break;
               case 12:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 16:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 18:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 19:
                  if (curChar == 34 && kind > 48)
                     kind = 48;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 22);
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 22:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 24:
                  if (curChar != 39)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(25);
                  break;
               case 52:
                  if (curChar == 47)
                     jjAddStates(8, 9);
                  break;
               case 54:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 55:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 56:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 57:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 59:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if (curChar == 42)
                     jjAddStates(23, 24);
                  break;
               case 61:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 60);
                  break;
               case 62:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 60);
                  break;
               case 63:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddStates(0, 7);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(65);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if (curChar != 46)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(25, 27);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(25, 27);
                  break;
               case 70:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(71);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddTwoStates(71, 14);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 74:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(75);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddTwoStates(75, 14);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 78:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(79, 14);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(25);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(25);
                  }
                  if (curChar == 70)
                     jjAddStates(31, 32);
                  else if (curChar == 84)
                     jjAddStates(33, 34);
                  else if (curChar == 110)
                     jjAddStates(35, 38);
                  else if (curChar == 78)
                     jjAddStates(39, 42);
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(25);
                  }
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(25);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
                  if (curChar == 101 && kind > 10)
                     kind = 10;
                  break;
               case 1:
               case 45:
                  if (curChar == 115)
                     jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 5:
                  if (curChar == 101 && kind > 11)
                     kind = 11;
                  break;
               case 6:
               case 39:
                  if (curChar == 117)
                     jjCheckNAdd(5);
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(43, 44);
                  break;
               case 14:
                  if ((0x5000000050L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 17:
                  if (curChar == 92)
                     jjAddStates(45, 47);
                  break;
               case 18:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if (curChar == 78)
                     jjAddStates(39, 42);
                  break;
               case 27:
                  if (curChar == 78 && kind > 40)
                     kind = 40;
                  break;
               case 28:
               case 35:
                  if (curChar == 97)
                     jjCheckNAdd(27);
                  break;
               case 29:
                  if (curChar == 110 && kind > 40)
                     kind = 40;
                  break;
               case 30:
               case 34:
                  if (curChar == 97)
                     jjCheckNAdd(29);
                  break;
               case 31:
               case 36:
                  if (curChar == 65)
                     jjCheckNAdd(29);
                  break;
               case 32:
               case 37:
                  if (curChar == 65)
                     jjCheckNAdd(27);
                  break;
               case 33:
                  if (curChar == 110)
                     jjAddStates(35, 38);
                  break;
               case 38:
                  if (curChar == 84)
                     jjAddStates(33, 34);
                  break;
               case 41:
                  if (curChar == 69 && kind > 11)
                     kind = 11;
                  break;
               case 42:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 70)
                     jjAddStates(31, 32);
                  break;
               case 46:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 69 && kind > 10)
                     kind = 10;
                  break;
               case 49:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 54:
                  jjAddStates(13, 15);
                  break;
               case 59:
                  jjCheckNAddTwoStates(59, 60);
                  break;
               case 61:
               case 62:
                  jjCheckNAddTwoStates(62, 60);
                  break;
               case 69:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 73:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 77:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 12);
                  break;
               case 54:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(13, 15);
                  break;
               case 59:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 61:
               case 62:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(62, 60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 80 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   65, 66, 67, 72, 73, 76, 77, 14, 53, 58, 16, 17, 19, 54, 55, 57, 
   10, 11, 14, 16, 17, 21, 19, 61, 63, 68, 69, 14, 76, 77, 14, 47, 
   51, 40, 43, 34, 35, 36, 37, 28, 30, 31, 32, 12, 13, 18, 20, 22, 
   70, 71, 74, 75, 78, 79, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\151\146", "\164\150\145\156", 
"\145\154\163\145", null, null, null, null, null, null, null, null, "\124\151\155\145", 
"\120\101\122", "\126\101\122", "\123\125\102", "\120\122\117\104", "\115\117\104", 
"\123\111\124\105", "\126\117\114", "\56\143", "\56\160", "\56\164", "\56\151", "\56\162", 
"\56\163\160", "\56\147\161", "\56\143\155\160", 
"\56\52\115\131\52\123\120\105\103\111\101\114\52\105\130\124\105\116\123\111\117\116", "\123\125\115", "\146\154\157\157\162", "\163\161\162\164", "\145\170\160", 
"\154\157\147", null, "\45\116\101\45", "\45\121\106\103\45", 
"\45\115\157\144\124\151\155\145\45", "\45\115\157\144\124\151\155\145\56\151\45", null, null, null, null, null, 
null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\72", 
"\56", "\53", "\55", "\52", "\57", "\75", "\76", "\74", "\41", "\136", "\45", 
"\75\75", "\74\75", "\76\75", "\41\75", "\174\174", "\46\46", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfff17ffffffc0f81L, 0x3fffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[80];
private final int[] jjstateSet = new int[160];
protected char curChar;
/** Constructor. */
public MR_Expression_ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public MR_Expression_ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 80; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
