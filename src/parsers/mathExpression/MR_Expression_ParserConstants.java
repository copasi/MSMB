/* Generated By:JavaCC: Do not edit this line. MR_Expression_ParserConstants.java */
package parsers.mathExpression;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MR_Expression_ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IF = 7;
  /** RegularExpression Id. */
  int THEN = 8;
  /** RegularExpression Id. */
  int ELSE = 9;
  /** RegularExpression Id. */
  int FALSE = 10;
  /** RegularExpression Id. */
  int TRUE = 11;
  /** RegularExpression Id. */
  int TRUE_1 = 12;
  /** RegularExpression Id. */
  int TRUE_2 = 13;
  /** RegularExpression Id. */
  int TRUE_3 = 14;
  /** RegularExpression Id. */
  int FALSE_1 = 15;
  /** RegularExpression Id. */
  int FALSE_2 = 16;
  /** RegularExpression Id. */
  int FALSE_3 = 17;
  /** RegularExpression Id. */
  int TIME = 18;
  /** RegularExpression Id. */
  int TYPE_PAR = 19;
  /** RegularExpression Id. */
  int TYPE_VAR = 20;
  /** RegularExpression Id. */
  int TYPE_SUB = 21;
  /** RegularExpression Id. */
  int TYPE_PROD = 22;
  /** RegularExpression Id. */
  int TYPE_MOD = 23;
  /** RegularExpression Id. */
  int TYPE_SITE = 24;
  /** RegularExpression Id. */
  int TYPE_VOL = 25;
  /** RegularExpression Id. */
  int EXTENSION_CONC = 26;
  /** RegularExpression Id. */
  int EXTENSION_PARTICLE = 27;
  /** RegularExpression Id. */
  int EXTENSION_TRANS = 28;
  /** RegularExpression Id. */
  int EXTENSION_INIT = 29;
  /** RegularExpression Id. */
  int EXTENSION_RATE = 30;
  /** RegularExpression Id. */
  int EXTENSION_SPECIES = 31;
  /** RegularExpression Id. */
  int EXTENSION_GLOBALQ = 32;
  /** RegularExpression Id. */
  int EXTENSION_COMPARTMENT = 33;
  /** RegularExpression Id. */
  int MY_SPECIAL_EXTENSION = 34;
  /** RegularExpression Id. */
  int SUM = 35;
  /** RegularExpression Id. */
  int FLOOR = 36;
  /** RegularExpression Id. */
  int SQRT = 37;
  /** RegularExpression Id. */
  int EXP = 38;
  /** RegularExpression Id. */
  int LOG = 39;
  /** RegularExpression Id. */
  int NAN = 40;
  /** RegularExpression Id. */
  int CONST_AVOGADRO = 41;
  /** RegularExpression Id. */
  int CONST_QUANTITY_CONV_FACTOR = 42;
  /** RegularExpression Id. */
  int CONST_MODEL_TIME = 43;
  /** RegularExpression Id. */
  int CONST_MODEL_TIME_INITIAL = 44;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 45;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 46;
  /** RegularExpression Id. */
  int EXPONENT = 47;
  /** RegularExpression Id. */
  int IDENTIFIER = 48;
  /** RegularExpression Id. */
  int LETTER = 49;
  /** RegularExpression Id. */
  int DIGIT = 50;
  /** RegularExpression Id. */
  int STRING_LITERAL = 51;
  /** RegularExpression Id. */
  int LPAREN = 52;
  /** RegularExpression Id. */
  int RPAREN = 53;
  /** RegularExpression Id. */
  int LBRACE = 54;
  /** RegularExpression Id. */
  int RBRACE = 55;
  /** RegularExpression Id. */
  int LBRACKET = 56;
  /** RegularExpression Id. */
  int RBRACKET = 57;
  /** RegularExpression Id. */
  int SEMICOLON = 58;
  /** RegularExpression Id. */
  int COMMA = 59;
  /** RegularExpression Id. */
  int COLON = 60;
  /** RegularExpression Id. */
  int DOT = 61;
  /** RegularExpression Id. */
  int PLUS = 62;
  /** RegularExpression Id. */
  int MINUS = 63;
  /** RegularExpression Id. */
  int TIMES = 64;
  /** RegularExpression Id. */
  int DIV = 65;
  /** RegularExpression Id. */
  int ASSIGN = 66;
  /** RegularExpression Id. */
  int GT = 67;
  /** RegularExpression Id. */
  int LT = 68;
  /** RegularExpression Id. */
  int BANG = 69;
  /** RegularExpression Id. */
  int CARET = 70;
  /** RegularExpression Id. */
  int PERC = 71;
  /** RegularExpression Id. */
  int EQ = 72;
  /** RegularExpression Id. */
  int LEQ = 73;
  /** RegularExpression Id. */
  int GEQ = 74;
  /** RegularExpression Id. */
  int NE = 75;
  /** RegularExpression Id. */
  int OR = 76;
  /** RegularExpression Id. */
  int AND = 77;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "<FALSE>",
    "<TRUE>",
    "\"true\"",
    "\"True\"",
    "\"TRUE\"",
    "\"false\"",
    "\"False\"",
    "\"FALSE\"",
    "\"Time\"",
    "\"PAR\"",
    "\"VAR\"",
    "\"SUB\"",
    "\"PROD\"",
    "\"MOD\"",
    "\"SITE\"",
    "\"VOL\"",
    "\".c\"",
    "\".p\"",
    "\".t\"",
    "\".i\"",
    "\".r\"",
    "\".sp\"",
    "\".gq\"",
    "\".cmp\"",
    "\".*MY*SPECIAL*EXTENSION\"",
    "\"SUM\"",
    "\"floor\"",
    "\"sqrt\"",
    "\"exp\"",
    "\"log\"",
    "<NAN>",
    "\"%NA%\"",
    "\"%QFC%\"",
    "\"%ModTime%\"",
    "\"%ModTime.i%\"",
    "<INTEGER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<STRING_LITERAL>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\".\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"^\"",
    "\"%\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
  };

}
